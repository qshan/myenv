#!/usr/bin/env bash

#####exmaple of Calling this file, just add this part at the end of ~/.bashrc
#if [ -f ~/data/myenv/_mybashrc ]; then
#    . ~/data/myenv/_mybashrc
#fi
#
#if [ -f ~/data/myenv/_mybashrc ]; then
#    . ~/data/myenv/_mybashrc
#else
#     echo "no this file"
#fi
#
#if [ ! -d ~/data/myenv ]; then
#    mkdir -p ~/data/myenv
#fi
#

#### if the variable is #not# set
##if [[ -z ${variable_tested} ]]; then
#if [[ -z ${variable01_tested} ]]; then
#  echo "variable01_tested is not existed"
#else
#  echo "variable01_tested is existed"
#fi
#
## if the variable is set
#if [[ -v variable_tested ]]; then
#  echo "variable_tested is existed"
#else
#  echo "variable_tested is not existed"
#fi

#read here https://tecadmin.net/tutorial/bash-scripting/bash-functions/
#--------------------------------------------------

echo "Calling ###[_mybashrc]### file setting"

#echo "======================================"
#echo "Check PATH info:"
##echo $path
#echo $PATH

##ToCheck##
## https://web.fe.up.pt/~jmcruz/etc/unix/sh-vs-csh.html
##------------------------------
##login shell startup fils call sequence
# /etc/profile
# ~/.bash_profile
# ~/.bash_login
# ~/.profile
##------------------------------
##logout clean fils call sequence
# ~/.bashrc
##------------------------------
##no-login shell startup fils call sequence
# ~/.bash_logout
##------------------------------
##bash Shell variables
# VarName=5
# VarName = 5
##------------------------------
##bash Environment variables (children inherit them)
# export EnvVarName=5
##------------------------------
##bash PATH & path variables
# export PATH=PathName01:PathName02
##------------------------------
##alias setting format
# alias ls="ls -l"
##------------------------------

#####
#if [ -f ~/.myalias_common ]; then
#  source ~/.myalias_common
#fi

#set the bash history size for personal setting
export HISTSIZE=10000

alias history='\history 1000'

export timefshan="`date +%Y-%m-%d-%H%M`"
#alias  gettime='echo `date +%Y-%m-%d-%H%M`'
alias  gettime='export timefshan="`date +%Y-%m-%d-%H%M`"; echo ${timefshan}'

alias numlockx.status=' numlockx status'
alias numlockx.on='     numlockx on'
alias numlockx.off='    numlockx off'

# replace Caps with CTRL
#debug#fshan#setxkbmap -option ctrl:nocaps
alias setxkbmap.print='    setxkbmap -print'
#
###set as default setting
##setxkbmap -option
alias setxkbmap.option='  setxkbmap -option'

alias xmodmap.help='      xmodmap --help'

alias xinput.list='       xinput --list '
alias xinput.list.tpad='  xinput --list | grep -i touchpad'
alias xinput.enable='     xinput --enable '
alias xinput.disable='    xinput --disable '

alias 7z.a='              7x a '
alias 7z.x='              7x x '
alias 7z.e='              7x e '
alias 7z.l='              7x l '
alias 7z.t='              7x t '

#
#reference : https://superuser.com/questions/1133476/make-terminal-recognize-pageup-and-pagedown-when-remapped-to-different-keys
# replace the Caps as press left-Shift and right-Shift both
#setxkbmap -option shift:both_capslock
#
# make short-pressed ctrl behave like Escape
# 单独按下Caps表示Escape，Caps+其它键时表示Ctrl
#xcape -e "Control_L=Escape"

#if [ -f ~/.myalias_common ]; then
#  source ~/.myalias_common
#fi




#alias setting here
##------------------------------
alias ls='    \ls --color=auto '
alias la='    ls -alh '
alias lt='    ls -ctl '
alias lstr='  ls -tr '
#
alias du.sh=' du -sh '
#
alias mvf='             \mv -f '
##------------------------------
alias grep='            \grep --color=auto '
alias grep.rni='        \grep --color=auto -rni '
alias grep.rniE='       \grep --color=auto -rniE '
alias grep.rnio='       \grep --color=auto -rnio '
#alias grepspaceonend='  \grep --color=auto -rni "\s\+\$" '
#alias grepspaceonend='  \grep --color=auto -rni "\ $" '
alias grep.spaceonend=' \grep --color=auto -rni " \+$" '
#alias grepspaceonendofline='\grep --color=auto -rni "\s\+\$$" '
#
#find path_name -type f -iname "*.[c|h]" | xargs grep '\s\+\$'
#find path_name -type f -iname "*.[c|h]" | xargs sed -i 's/\s\+\$//g'
#grep --color=auto -rni '\s\+\$' pathname
##------------------------------
alias findL='               \find -L '
alias findSwfFile='         find ./ -type f -iname "*.sw*" '
alias findSwfFileRemove='   find ./ -type f -iname "*.sw*" | xargs \rm -rfv '
alias findDotOFile='        find ./ -type f -iname "*.o" '
alias findDotOFileRemove='  find ./ -type f -iname "*.o" | xargs \rm -rfv '
alias findremovespaceonend='functionfindremovespaceonend(){ unset -f functionfindremovespaceonend; find "$@" -type f | xargs sed -i "s/\s\+\$//g" ; }; functionfindremovespaceonend '
#define a bash function
function findCheckFiles() { find "$@" -type f | xargs ls -alh ; }
#TODO#
#find ./ -type f | xargs sed -i 's/13/14/g'
#find TargetPathName -type f -iname "*.c" | xargs sed -i 's/HWIO_OUTXF\s*(\s*[a-zA-Z0-9_\-]*\s*,\s*/HWIO_OUTF (/g'
##------------------------------
alias readlinkf='readlink -f '
##------------------------------
alias sudodpkgforce-depends='   sudo dpkg -P --force-depends '
alias sudoaptfix-brokeninstall='sudo apt --fix-broken install'
alias sudoubuntu-driversauto='  sudo ubuntu-drivers autoinstall'
alias sudoupdatedb='            sudo updatedb '
alias sudolocate='              sudo locate '
#example# sudolocate AppName
alias sudoupdatealternative='   sudo update-alternatives --remove-all '
#example# sudoupdatealternative AppName

##------------------------------
alias tree.U='        \tree -U '
alias tree.r='        \tree -r '
alias tree.sort.name='\tree --sort=name '
##------------------------------
alias whicha='which -a '
##------------------------------
alias lnsTf='ln -sTf '
alias lnsnf='ln -snf '
##------------------------------
alias chmod+R='chmod -R a+r '
alias chmod-R='chmod -R a-r '
alias chmodER='chmod -R a=r '
##------------------------------
alias tar.czvf='tar -czvf '
alias tar.cJvf='tar -cJvf '
alias tar.xzvf='tar -xzvf '
alias tar.xJvf='tar -xJvf '
alias tar.tf='  tar -tf '
##------------------------------
#alias RenameReplaceSpace="\rename         's/\s+/_/g' "
alias RenameReplaceSpace="  \rename         s/\'+/_/g "
alias RenameReplaceSpace1=" \rename        's/[\-|_|\s]*\-+[\-|_|\s]*/-/g' "
#alias RenameReplaceSpace2="\rename        's/\s*[(|)|\[|\]|{|}|&|,|\!|-]*\s+/_/g' "
#alias RenameReplaceSpace2="\rename        's/[(|)|\[|\]|{|}|&|,|\!|-|\s]+/_/g' "
#alias RenameReplaceSpace2="\rename        's/[(|)|\[|\]|{|}|&|,|’|\!|-|\+|\s]+/_/g' "
#alias RenameReplaceSpace2="\rename        's/[(|)|\[|\]|{|}|&|,|’|\!|\-|_|\s|:]+/_/g' "
alias RenameReplaceSpace2=" \rename        's/[(|)|\[|\]|{|}|&|,|\!|_|\s|;|:]+/_/g' "
alias RenameReplaceSpace21="\rename        's/[(|)|\[|\]|{|}|&|,|\!|\"|;|:]+/./g' "
alias RenameReplaceSpace22="\rename        's/[_|\s]+/_/g' "
#\rename        's/[(|)|\[|\]|{|}|&|,|'"'"'|\!|-|_|\s|:]+/_/g'
#alias RenameReplaceSpace3="\rename        's/[《|》|（|）|：|、|(|)|“|”|·|，|’|、|\[|\]|\s|’]+/_/g' "
alias RenameReplaceSpace3=" \rename        's/[\-|_]*\.+[\-|_]*/./g' "
#[《|》|（|）|：|、|(|)|“|”|·|，|、|\[|\]|\s|’]
#alias RenameReplaceSpaceAll="RenameReplaceSpace2 *.* ;RenameReplaceSpace1 *.* ;RenameReplaceSpace3 *.* ;"
alias RenameReplaceSpaceAll="RenameReplaceSpace21 *.* ; RenameReplaceSpace22 *.* ; RenameReplaceSpace1 *.* ; RenameReplaceSpace3 *.* ;"
alias RenameRemoveSChar="   \rename         's/\s*[(|)|\[|\]|{|}|&|,|\!|-]+\s*/-/g' "
alias RenameRemoveSChar2="  \rename         's/[(|)|\[|\]|{|}|&|,|\!]+//g' "
alias RenameCleanDotInFileName="\rename     's/[-|_]*\.+[-|_]*/./g' "
#alias RenameFiles='functionRenameFiles(){ unset -f functionRenameFiles; RenameRemoveSChar "$@" ; RenameReplaceSpace "$@" ;}; functionRenameFiles '
#alias RenameFilesInCurrentFolder="RenameRemoveSChar *.* ; RenameReplaceSpace *.* "
alias RenameFilesInCurrentFolder="RenameRemoveSChar *.* ; RenameReplaceSpace *.* ; RenameCleanDotInFileName *.* ;"
alias RenameFilesInFolder='functionRenameFilesInFolder(){ unset -f functionRenameFilesInFolder; RenameRemoveSChar "$@"/*.* ; RenameReplaceSpace "$@"/*.* ;  RenameCleanDotInFileName "$@"/*.* ;}; functionRenameFilesInFolder '
##------------------------------
#alias GetCurrentFolderName="`pwd | grep 'dev_' | sed -r 's/.*dev_\w+\/\w+\/([0-9a-zA-Z_-]*)\/.*/\1/g'`"
#alias GetCurrentFolderName='`pwd | grep ".*" | sed -r "s/(.*)\/(.*)/\2/g"`'
#alias GetCurrentFolderName='pwd | grep ".*" | sed -r "s/(.*)\/(.*)/\2/g"'
alias GetNameofCurrentFolder='echo $PWD | sed -r "s/(.*)\/(.*)/\2/g"'
#alias GetCurrentPathOfFolderName='`pwd | grep ".*" | sed -r "s/(.*)\/(.*)/\1/g"`'
#alias GetCurrentPathOfFolderName='pwd | grep ".*" | sed -r "s/(.*)\/(.*)/\1/g"'
alias GetFullPathOfCurrentFolder='echo $PWD | sed -r "s/(.*)\/(.*)/\1/g"'
##------------------------------
alias sed_i_r='             sed -i -r '
alias sedremovespaceonend=' sed -i "s/\s\+\$//g" '
alias sedremovespaceonend1='sed -i "s/\ \+$//g" '
#example#sed -i -r 's/Word_searched/word_target/g' File_name_replaced
#sed -i -r "s/AC_INIT(.*)/AC_INIT(${FileNameOfTopCode})/g" configure.in
##------------------------------
alias mount.loop='          mount -o loop '
##------------------------------

alias h='\history 1000'
alias v='         vim '
alias vimd='      vim -d '
alias vimdh='     vim -c "set diffopt+=horizontal" -d '
alias vimdo='     vim -d -o '
#alias nvimdh='    vim -c "set-default diffopt+=horizontal" -d '
alias vimR='      vim -R '
alias vimo='      vim -o '
alias vimO='      vim -O '
alias gvimo='     gvim -o '
alias gvimO='     gvim -O '
alias gvimd='     gvim -d '
alias gvimdo='    gvim -d -o '
alias gvimR='     gvim -R '
alias nvimclean=' nvim --clean '
alias nvimd='     nvim -d '
alias nvimdh='    nvim -c "set diffopt+=horizontal" -d '
alias nvimdo='    nvim -d -o '
alias nvimR='     nvim -R '
#alias nvimdh='    nvim -c "set-default diffopt+=horizontal" -d '
alias nvimo='     nvim -o '
alias nvimO='     nvim -O '
#alias nvimqt='    nvim-qt -- '
alias nvimqt='    nvim-qt --geometry 970x512 -- '

alias cscopebcqRv=' cscope -bcqRv '

alias try.open.proxy.clash-verge='clash-verge'
alias try.open.proxy.hiddify='/data/tools/proxy/hiddify/Hiddify-Linux-x64.2.3.1.AppImage'

##ToCheck# for your env default setting
alias Emacs='/usr/bin/emacs26'
#alias EmacsM='Emacs -mm'
#alias EmacsM='Emacs --maximized'
#function of open emace gui with background process in shell
#wored#EmacsMm () {
#wored#  Emacs -mm "$@" &
#wored#}
##worked##alias EmacsM='functionEmacsM(){ Emacs -mm "$@" & }; functionEmacsM '
#alias EmacsM='functionEmacsM(){ unset -f functionEmacsM; Emacs -mm "$@" & }; functionEmacsM '
alias EmacsM='functionEmacsM(){ unset -f functionEmacsM; Emacs -mm --no-desktop "$@" & }; functionEmacsM '

function EmacsM1() { Emacs -mm --no-desktop "$@" & }








#for lubuntu
alias openFileBroswer='pcmanfm &'
#for ubuntu
#alias openFileBroswer='nautilus &'

alias openPdf='             evince '
alias md.quarto.convert='   quarto convert'
alias md.quarto.preview='   quarto preview'
alias md.marp.info='        whereis marp'

# sudo apt install qpdf
alias qpdf.decrypt='qpdf --decrypt '
# example
# qpdf --decrypt inputfile.pdf outpurfile.pdf

#rust setting
alias cargonew='    cargo new '
alias cargobuild='  cargo build '
alias cargorun='    cargo run '

#go_path alias
alias gotestspace=' cd /data/work/test_space'
alias goriot='      cd /data/work/test_space/RIOT'
alias gortthread='  cd /data/work/test_space/rt-thread'
alias gortqemu='    cd /data/work/test_space/rt-thread/bsp/qemu-vexpress-a9'
#
alias goquarkts='   cd /data/work/test_space/QuarkTS'
alias gonuttx='     cd /data/work/test_space/nuttx'
alias goCTest='     cd /data/work/test_space/ctest_qshan'
alias goCppTest='   cd /data/work/test_space/cpptest_qshan'

#git alias
alias git.help.a='                   git help -a '
alias git.gui='                     git gui '
alias git.add_f='                   git add -f '
alias git.mvn='                     git mv -n '
#alias gitmvn='                     git mv -dry-run '
alias git.mv='                      git mv '
alias git.mv.v='                     git mv -v '
alias git.mv.f='                     git mv -f '
alias git.rm.n='                     git rm -n '
#alias gitrmn='                     git rm -dry-run '
alias git.rm='                      git rm '
alias git.rm.r='                     git rm -r '
alias git.rm.f='                     git rm -f '
#
alias git.commit.ma='                git commit -a -m '
#example# git commit -ma "coment description"
alias git.commit.m='                git commit -m '
#example# git commit -m "coment description" FileName1 FileName2
alias git.commit.amend='            git commit --amend '
alias git.push='                    git push '
#example# git push TargetName SourceName #push data from SourceName to TargetName
alias git.push.set-upstream='       git push --set-upstream '
##### set the default behavior of git push operation, from local master to remote origin
##### git push --set-upstream origin master
alias git.push.origin.master='      git push origin master'
# $git push origin master                       #normal push, find a ref that matches master in the source repo(most likely, it would find refs/heads/master), and update the same ref in the origin repo with it. If master did not exist remotely, it would be created.
#example# git push --set-stream TargetName SourceName #push data from SourceName to TargetName
alias git.pull='                    git pull --tags '
alias git.pull.origin.master='      git pull --tags origin master '
#example git checkout TagName FileName
#example git checkout TagName
#example git checkout -b NewBranchName
#example git checkout -b NewBranchName TagName
alias git.fetch='                   git fetch '
alias git.fetch.unshallow='         git fetch --unshallow '
alias git.fetch.all='               git fetch --all '
alias git.remote.add.origin='       git remote add origin '
alias git.remote.add='              git remote add '
#git remote add LocalNameForRemoteRepo file://${FullPathOfRemoteRepo}/${ProjectName}.git

alias git.remote.v='                git remote -v'
alias git.remote.v.show='           git remote -v show '
#example# gitremoteshow RemoteRepoName
alias git.remote.show.origin='      git remote show origin'
alias git.remote.prune.origin='     git remote prune origin'
alias git.clone='                   git clone '
alias git.clone.b.master='          git clone -b master '
alias git.clone.depth1='            git clone --depth=1 '
alias git.clone.recursive='         git clone --recursive '
alias git.clone.bare.l='            git clone --bare -l '
#example git clone --bare -l LocalRepoPathWithFullName/.git BackupRepoNameWithFullPath.git
#
alias git.grep='                    git grep '
alias git.grep.r='                  git grep -r '
alias git.grep.i='                  git grep -i '
alias git.grep.I='                  git grep -I '
alias git.grep.help='               git grep --help'
alias git.diff='                    git diff '
alias git.diff.stat='               git diff --stat '
alias git.difftool='                git difftool --tool=vimdiff '
alias git.difftool.head='           git difftool --tool=vimdiff HEAD '
alias git.difftool.head1='          git difftool --tool=vimdiff HEAD^ '
alias git.difftool.head2='          git difftool --tool=vimdiff HEAD^^ '
alias git.show='                    git show '
alias git.lsfiles='                 git ls-files '
alias git.lsremote='                git ls-remote '
alias git.lstree='                  git ls-tree '
alias git.log='                     git log '
alias git.log.pretty='              git log --pretty="%h - %s" --no-merges -- t/ '
alias git.log.pretty.short='        git log --pretty=short '
alias git.log.pretty.oneline='      git log --pretty=oneline '
alias git.log.graph='               git log --graph '
alias git.log.stat='                git log --stat '
alias git.tag.l='                   git tag -l '
alias git.tag.a='                   git tag -a '
#alias gitstatus='                  git status '
alias git.status.short='            git status --short '
alias git.branch.all='              git branch --all'
alias git.branch.list='             git branch --list'
alias git.branch.remotes='          git branch --remotes'
alias git.branch.track='            git branch --track'
#example# gitbranchtrack localBranchName remoteHostName/remoteBranchName
alias git.branch.b='                git branch -b'
#example# gitbranchb localBranchName remoteHostName/remoteBranchName
#example# gitbranchb localBranchName
alias git.switch='                  git switch '
alias git.switch.c='                git switch -c'
alias git.switch.f='                git switch -f'
alias git.switch.m='                git switch -m'
#example# gitswitchc localBranchName remoteHostName/remoteBranchName
alias git.restore='                 git restore'
#alias git.config='                  git config '
alias git.config.global='           git config --global'
alias git.config.local='            git config --local'
alias git.config.system='           git config --system'
alias git.config.worktree='         git config --worktree'
alias git.config.file='             git config --file'
alias git.config.list='             git config --list'
alias git.config.list.global='      git config --list --global'
alias git.config.list.local='       git config --list --local'
alias git.config.list.system='      git config --list --system'
alias git.config.list.worktree='    git config --list --worktree'
alias git.config.list.file='        git config --list --file'
alias git.reset.soft='              git reset --soft '
alias git.reset.hard='              git reset --hard '
#example# gitreset_hard FileName
#example# gitreset_hard FolderName
alias git.reset.head0='             git reset HEAD '
alias git.reset.head1='             git reset HEAD^ '
alias git.reset.head2='             git reset HEAD~2 '
alias git.reset.head3='             git reset HEAD~3 '
alias git.diff.head='               git diff HEAD '
alias git.diff.cached='             git diff --cached '
alias git.submodule.update='        git submodule update --init --recursive '
alias git.submodule.update.f='      git submodule update --init --recursive --force '
alias git.submodule.update.remote.f=' git submodule update --init --recursive --remote --force '
alias git.submodule.deinit='        git submodule deinit '
alias git.submodule.add='           git submodule add '
alias git.submodule.sync='          git submodule sync '
alias git.submodule.sync.recursive='git submodule sync --recursive '
#example# git submodule add <submodule-url> <submodule-path>
#example#reinit submodule
##1#Delete the submodule folder:
#git submodule deinit <submodule_path>
#git rm <submodule_path>
#rm -rf .git/modules/<submodule_path>
##2#Add the submodule again:
#git submodule add <repository_url> <submodule_path>
##3#Update the submodule:
#git submodule update --init --recursive
##4#Update submodule repo source
#git config --file=.gitmodules submodule.Submod.url https://github.com/username/ABC.git
#git config --file=.gitmodules submodule.Submod.branch Development
#git submodule sync
#git submodule update --init --recursive --remote
#
alias git.submodule.status='        git submodule status '
alias git.submodule.summary='       git submodule summary '
alias git.submodule.set-url='       git submodule set-url -- '
# git submodule set-url -- <path> <url>
alias git.pull.submodules='         git pull --recurse-submodules '
alias git.checkout.b='              git checkout -b '
alias git.checkout.f='              git checkout -f '
#example# git checkout -f <branch> [<start point>]
alias git.checkout.m='              git checkout -m '
alias git.checkout--='              git checkout -- '
#example# gitcheckout commitNumber fileName
#example# gitcheckout fileName
alias git.clean.fd='                git clean -fd '
alias git.stash='                   git stash '
alias git.stash.list='              git stash list '
alias git.stash.show='              git stash show '
alias git.stash.pop='               git stash pop '
alias git.stash.apply='             git stash apply '
alias git.stash.drop='              git stash drop '
alias git.stash.clear='             git stash clear '
alias git.stash.branch='            git stash branch '
alias git.stash.clear='             git stash clear '
alias git.stash.create='            git stash create '
alias git.stash.store='             git stash store '
##### Interrupted workflow
###  When you are in the middle of something, your boss comes in and demands that you fix something immediately.
###  Traditionally, you would make a commit to a temporary branch to store your changes away, and return to your
###  original branch to make the emergency fix, like this:
###      # ... hack hack hack ...
###TODO# $ git switch -c my_wip
###      $ git commit -a -m "WIP"
###      $ git switch master
###      # edit emergency fix
###      $ git commit -a -m "Fix in a hurry"
###      $ git switch my_wip
###      $ git reset --soft HEAD^
###      # ... continue hacking ...
###  You can use git stash to simplify the above, like this:
###      # ... hack hack hack ...
###info  $ git stash
###      # edit emergency fix
###      $ git commit -a -m "Fix in a hurry"
###info  $ git stash pop
###      # ... continue hacking ...
#
alias git.init='                    git init '
alias git.init.bare='               git init --bare '
#alias git.clone.bare.l='            git clone --bare -l '
#example git clone --bare -l LocalRepoPathWithFullName/.git BackupRepoNameWithFullPath.git

### docker start ###
#
# docker-compose up
# 启动和运行整个应用。默认情况下，docker-compose up会尝试自动构建任何尚未构建的镜像。如果你想强制它重新构建镜像，可以使用--build选项。
alias docker-compose.up='           docker-compose up '
#
# docker-compose down
# 停止并删除容器、网络、卷和镜像创建的docker-compose up。
alias docker-compose.down='         docker-compose down '
#
#构建和镜像管理
#
#
#docker-compose build
#构建或重新构建服务中定义的镜像。
alias docker-compose.build='        docker-compose build '
#
#docker-compose push
#将服务镜像推送到Docker Hub或其他镜像仓库。
alias docker-compose.push='         docker-compose push '
#
#docker-compose pull
#拉取服务依赖的镜像。
alias docker-compose.pull='         docker-compose pull '
#
#服务管理
#
#
#docker-compose start
#启动已经存在的服务容器。
alias docker-compose.start='        docker-compose start '
#
#docker-compose stop
#停止正在运行的容器而不删除它们。与docker-compose down不同，不会删除容器和网络。
alias docker-compose.stop='         docker-compose stop '
#
#docker-compose restart
#重启服务。
alias docker-compose.restart='      docker-compose restart '
#
#docker-compose pause
#暂停服务中的容器。
alias docker-compose.pause='        docker-compose pause '
#
#docker-compose unpause
#恢复服务中已暂停的容器。
alias docker-compose.unpause='      docker-compose unpause '
#
# 查看服务状态和日志
#
#
#docker-compose ps
#列出项目中当前的容器。
alias docker-compose.ps='           docker-compose ps '
alias docker-compose.ps-a='         docker-compose ps -a'
#
#docker-compose logs
#查看服务的日志输出。可以指定服务名称来查看特定服务的日志。
alias docker-compose.logs='         docker-compose logs '
alias docker-compose.logsf='        docker-compose logs -f '
# docker-compose logs -f containerName
#
#
#运行一次性命令
#
#
#docker-compose run
#在一个新容器中运行一个一次性命令。例如，docker-compose run app bash会在app服务的容器中启动一个新的bash会话。
alias docker-compose.run='          docker-compose run '
#
#docker-compose exec
#在运行中的容器上执行命令。与run不同，exec会在已经存在且正在运行的容器中执行命令。
alias docker-compose.exec='         docker-compose exec '
#
# 其他命令
#
#
#docker-compose config
#验证并查看配置。这个命令可以用来检查配置文件的语法是否正确。
alias docker-compose.config='       docker-compose config '
#
# docker-compose version
# 显示Docker Compose的版本信息。
alias docker-compose.version='      docker-compose version '
#
#list docker images
alias docker.images='               docker images '
#
## reference: https://docs.docker.com/reference/cli/docker/container/create/
## create docker
alias docker.container.create='     docker container create '
alias docker.create='               docker create '
## docker create -it --name my_container ubuntu:latest
#
### start docker
## docker start my_container
#
### 进入Docker容器,run bash
## docker exec -it my_container /bin/bash
#
# remove the local/downloaded image
alias docker.rmi='                  docker rmi '
#docker rmi 镜像名称:标签名	删除已下载的镜像
#remove the container
alias docker.rm='                   docker rm '
alias docker.rmf='                  docker rm -f '
#
# search image from offical repo (hub.docker.com)
alias docker.search='               docker search '
#
## #docker run --name 容器名称 -d -p 主机端口:容器内端口 -e 环境变量 -v localpath:dockerpath --link 其它容器名:容器中别名 镜像名称:标签名
## -d: 后台运行容器，并返回容器ID；
## -i: 以交互模式运行容器，通常与 -t 同时使用；
## -t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；
## --name="XXXX": 为容器指定一个名称；
## -e username="XXXX": 设置环境变量；
## -m :设置容器使用内存最大值；
## --link=[]: 添加链接到另一个容器；当要访问其它容器中的内容时，需要先链接才可以使用
## -p: 开放一个端口或一组端口
## -v: 映射容器的卷
#
### docker end ###


#input methods reset
alias input_methods_reset_fcitx='fcitx -r'
















###############alias for tags generation
## todo Universal-ctags is required
#alias ctags='the_ctags_in_your_env'
alias ctags_list-languages="        ctags --list-languages "
alias ctags_list-maps="             ctags --list-maps "
alias ctags_list-map-exetensions="  ctags --list-map-extensions "
alias ctags_list-fields="           ctags --list-fields "
alias ctags_list-kinds="            ctags --list-kinds "
alias ctags_list-kinds-full="       ctags --list-kinds-full "
alias ctags_list-extras="           ctags --list-extras "
alias ctags_list-excludes="         ctags --list-excludes "
alias ctags_list-features="         ctags --list-features "
alias ctags_list-params="           ctags --list-params "
alias ctags_langmap='               echo "ctags --langmap=c:.c.x,java:+.j"'
alias ctags_langdef='               echo "ctags --langdef=C "'
#
alias ctags_R="                     ctags-universal -R --extras=+qfrs "
#alias ctags_R_C="                   ctags-exuberant -R    --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extra=+qf "
alias ctags_R_C="                   ctags-universal -R    --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs "
#alias ctags_R_Python="              ctags-exuberant -R    --languages=python --python-kinds=+vi --fields=+iaSKz --extra=+qf "
alias ctags_R_Python="              ctags-universal -R    --languages=python --python-kinds=+vi --fields=+iaSKz --extras=+qfrs "
#alias ctags_R_SV="                  ctags-exuberant -R    --languages=systemverilog --systemverilog-kinds=+ctfeilmpdva --fields=+iaSKz --extra=+qf "
#alias ctags_R_SV="                  ctags-exuberant -R    --languages=systemverilog,verilog --systemverilog-kinds=+ctfeilmp --fields=+iaSKz --extras=+qf "
alias ctags_R_SV="                  ctags-universal -R    --languages=systemverilog,verilog --systemverilog-kinds=+ctfemp --fields=+aSKz --extras=+qfrs "
alias ctags_R_scala="               ctags-universal -R    --languages=scala --scala-kinds=+p --fields=+iaS --extras=+qfrs "
alias ctags_R_scala-C-Python="      ctags-universal -R    --exclude=@.ctagsignore --links=no --languages=scala,C,C++,python "

#alias ctags_Re="                    ctags-exuberant -R -e --c++-kinds=+px --fields=+iaS --extra=+qf "
alias ctags_Re="                    ctags-universal -R -e --extras=+qfrs "
#alias ctags_Re_C="                  ctags-exuberant -R -e --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extra=+qf "
alias ctags_Re_C="                  ctags-universal -R -e --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs "
#alias ctags_Re_Python="             ctags-exuberant -R -e --languages=python --python-kinds=+vi --fields=+iaSKz --extra=+qf "
alias ctags_Re_Python="             ctags-universal -R -e --languages=python --python-kinds=+vi --fields=+iaSKz --extras=+qfrs"
#alias ctags_Re_SV="                 ctags-exuberant -R -e --languages=systemverilog --systemverilog-kinds=+ctfeilmpdva --fields=+iaSKz --extra=+qf "
#alias ctags_Re_SV="                 ctags-exuberant -R -e --languages=systemverilog,verilog --systemverilog-kinds=+ctfeilmp --fields=+iaSKz --extras=+qf "
alias ctags_Re_SV="                 ctags-universal -R -e --languages=systemverilog,verilog --systemverilog-kinds=+ctfeilmp --fields=+iaSKz --extras=+qfrs"
#alias ctags_Re_scala="              ctags -R -e --scala-kinds=+p --fields=+iaS --extra=+qf "
alias ctags_Re_scala="              ctags-universal -R -e --languages=scala --scala-kinds=+p --fields=+iaS --extras=+qf "
alias ctags_Re_scala-C-Python="     ctags-universal -R -e --exclude=@.ctagsignore --links=no --languages=scala,C,C++,python "
#alias ctags_L="                     ctags-exuberant -R    --c++-kinds=+px --fields=+iaS --extra=+qf -L "
alias ctags_L="                     ctags-universal       --extras=+qfrs -L"
alias ctags_L_C="                   ctags-universal       --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -L"
alias ctags_L_Python="              ctags-universal       --languages=python --python-kinds=+vi --fields=+iaSKz --extras=+qfrs -L"
#alias ctags_L_SV="                  ctags -R    --languages=systemverilog --systemverilog-kinds=+ctfeilmpdva --fields=+iaSKz --extra=+qf -L "
alias ctags_L_SV="                  ctags-universal       --languages=systemverilog,verilog --systemverilog-kinds=+ctfeilmp --fields=+iaSKz --extras=+qfrs -L"
alias ctags_L_scala="               ctags-universal       --languages=scala --scala-kinds=+p --fields=+iaS --extras=+qfrs -L"
#you could try with filelist input style, like
#ctags_R -L filelist_name

export PATH=$PATH:/usr/local/lib:/usr/lib

#set the the path of graalvm instead of openjdk
#export PATH=~/data/tools/graalvm/graalvm-ce-java11-22.1.0/bin:$PATH
#export PATH=~/data/tools/graalvm/graalvm-jdk-22.0.1+8.1/bin:$PATH
#export PATH=~/data/tools/graalvm/graalvm-jdk-17.0.11+7.1/bin:$PATH
if [ -d ~/data/tools/graalvm/graalvm-jdk-17.0.11+7.1 ]; then
  export graalvmHome=~/data/tools/graalvm/graalvm-jdk-17.0.11+7.1
fi
if [ -d ~/data/tools/graalvm/graalvm-jdk-22.0.1+8.1 ]; then
  export graalvmHome=~/data/tools/graalvm/graalvm-jdk-22.0.1+8.1
fi

export PATH=$graalvmHome/bin:$PATH
export JAVA_HOME=$graalvmHome

#sudo apt install openjdk-8-jdk
#if ['' eq `which java`]; then sudo apt install openjdk-8-jdk; fi;

if [ -d ~/data/tools/briss/briss-0.9 ]; then
export BrissInstallPath='~/data/tools/briss/briss-0.9'
alias OpenBriss="java -jar ${BrissInstallPath}/briss-0.9.jar &"
fi
#
#set title with current path
#export PROMPT_COMMAND=' echo -ne "\033]0; $PWD \007" ; echo -ne "\033]1; ${PWD}_Min \007" '
#export PROMPT_COMMAND=' echo -ne "\033]0;  $PWD \a" ; echo -ne "\033]1; $PWD min \a" '
export PROMPT_COMMAND=' echo -ne "\033]0; `basename $PWD` \a" ; echo -ne "\033]1; `basename $PWD` \a" '
#where \033 is the character code for ESC, and \007 for BEL
#alias set_tab_title='funcSetTabTitle(){ unset -f funcSetTabTitle; export PROMPT_COMMAND=' echo -ne "\033]0; `basename $$PWD` \a" ; echo -ne "\033]1; `basename $$PWD` \a" ' }; funcSetTabTitle '

#PROMPT_COMMAND='        echo -ne "\033]0; $PWD \a"'
alias set_terminal_title='        echo -ne "\033]0; $PWD \a"'
#alias set_terminal_title='        echo -ne "\033]0; `basename $PWD` \a"'
#PROMPT_COMMAND='        echo -ne "\033]0; $PWD \a"'
alias set_terminal_title_min='    echo -ne "\033]1; $PWD \a"'
#alias set_terminal_title_min='    echo -ne "\033]1; `basename $PWD` \a"'

#get the current shell type
alias get_current_shell="         sh -c 'ps -p \$\$ -o ppid=' | xargs ps -o comm= -p"

#Bash Color Codes
## Text Format          Foreground (text) color   Background color
## 0: normal text       30: Black                 40: Black
## 1: bold              31: Red                   41: Red
## 4: Underlined text   32: Green                 42: Green
##                      33: Yellow                43: Yellow
##                      34: Blue                  44: Blue
##                      35: Purple                45: Purple
##                      36: Cyan                  46: Cyan
##                      37: White                 47: White
##  \e[  – Indicates the beginning of color prompt
##  x;ym – Indicates color code. Use the color code values mentioned below.
##  \e[m – indicates the end of color promptSTARTFGCOLOR='\e[0;47;34m';
##  STARTBGCOLOR="\e[47m"
##  ENDCOLOR="\e[0m"
##  export PS1="$STARTFGCOLOR$STARTBGCOLOR\u@\h \w> $ENDCOLOR"
##  export PS1="${STARTFGCOLOR}${STARTBGCOLOR}\u@\h \w> ${ENDCOLOR}"
#
export BashBlackBG="40;"
#TODO#set color of background #export BashBlack="\[\e[0;40;30m\]"


#
export BashBlack="\[\e[0;30m\]"
export BashDarkGray="\[\e[1;30m\]"
export BashBlue="\[\e[0;34m\]"
export BashLightBlue="\[\e[1;34m\]"
export BashGreen="\[\e[0;32m\]"
export BashLightGreen="\[\e[1;32m\]"
export BashCyan="\[\e[0;36m\]"
export BashLightCyan="\[\e[1;36m\]"
export BashRed="\[\e[0;31m\]"
export BashLightRed="\[\e[1;31m\]"
export BashPurple="\[\e[0;35m\]"
export BashLightPurple="\[\e[1;35m\]"
export BashBrown="\[\e[0;33m\]"
export BashYellow="\[\e[1;33m\]"
export BashLightGray="\[\e[0;37m\]"
export BashWhite="\[\e[1;37m\]"
#export BashColorEnd="\[\e[0m\]"
export BashColorEnd="\[\e[0;m\]"
#worked#export BashColorEnd="\[\033[0m\]"

#set format of shell header string for bash
#alias set_full_path="export PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '"
#worked#alias set_full_path="export PS1='\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$\[\e[m\]'"
#NeedRemove+\e[-m#alias set_full_path="export PS1='\[\033[${BashLightGreen}m\]\u\[\033[00m\]:\[\033[${BashLightBlue}m\]\w\[\033[00m\]$\[\e[m\]'"
#alias set_full_path="export PS1='\[${BashLightGreen}\]\u\[${BashColorEnd}\]:\[${BashLightBlue}\]\w\[${BashColorEnd}\]$\[${BashColorEnd}\]'"
#alias set_full_path="export PS1='\[${BashLightGreen}\]\u\[${BashColorEnd}\]:\[${BashLightBlue}\]\w\[${BashColorEnd}\]$'"
#alias set_full_path="export PS1='\[${BashLightGreen}\]\u\[${BashColorEnd}\]:\[${BashLightBlue}\]\w[\#]\[${BashColorEnd}\]$'"
#alias set_full_path="export PS1='\[${BashLightGreen}\]\u\[${BashColorEnd}\]:\[${BashLightBlue}\]\w\[${BashColorEnd}\][\#]$'"
####update the color variable formate
#alias set_full_path="export PS1='${BashLightGreen}\u${BashColorEnd}:${BashLightBlue}\w${BashColorEnd}[\#]$'"
alias  set_full_path="export PS1='${BashLightGreen}\u${BashColorEnd}:${BashLightBlue}\w${BashColorEnd}${BashLightGreen}[\#]${BashColorEnd}$'"
#alias set_full_path1="export PS1='\[${BashYellow}\]\u:\w\[${BashColorEnd}\]$'"
#alias set_full_path1="export PS1='\[${BashYellow}\]\u:\w[\#]\[${BashColorEnd}\]$'"
####update the color variable formate
#alias set_full_path1="export PS1='${BashYellow}\u:\w${BashColorEnd}${BashLightGreen}[\#]${BashColorEnd}$'"
alias set_full_path1="export PS1='${BashYellow}\u:\w${BashColorEnd}${BashLightGreen}[\#]\n${BashColorEnd}$'"
#
#alias set_short_path="export PS1='[\u@\h_\w\$ '"
#alias set_short_path="export PS1='\[\033[01;32m\]\u@\h$ '"
#alias set_short_path="export PS1='\[\033[01;32m\]\u\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]$\[\e[m\]'"
#worked#alias set_short_path="export PS1='\[\033[01;33m\]\u\[\033[00m\]:\[\033[01;34m\]\W\[\033[01;32m\]$\[\e[m\]'"
#worked#alias set_short_path="export PS1='\[\033[${BashYellow}m\]\u\[\033[00m\]:\[\033[${BashLightBlue}m\]\W\[\033[${BashLightGreen}m\]$\[\e[m\]'"
#alias set_short_path="export PS1='\[${BashYellow}\]\u\[${BashColorEnd}\]:\[${BashLightBlue}\]\W\[${BashLightGreen}\]$\[${BashColorEnd}\]'"
#alias set_short_path1='export PS1="${BashYellow}\u${BashColorEnd}:${BashLightBlue}\W${BashLightGreen}$\[${BashColorEnd}\]"'
####update the color variable formate
alias  set_short_path="export PS1='${BashYellow}\u${BashColorEnd}:${BashLightBlue}\W${BashLightGreen}[\#]${BashColorEnd}$'"
alias set_short_path1='export PS1="${BashYellow}\u${BashColorEnd}:${BashLightBlue}\W${BashLightGreen}[\#]${BashColorEnd}$"'
#try##alias set_short_path='export PS1="\[---\e[---${BashYellow}m \]---\u---\[---\e[---0m---\]:\[---\e[---${BashLightBlue}m---\]---\W\[---\e[---${BashLightGreen}m---\]---$---\[---\e[m---\]"'
#new#alias set_short_path='export PS1="${BashYellow}---\u---${BashColorEnd}---:---${BashLightBlue}---\W---${BashLightGreen}$---\[---${BashColorEnd}---\]"'
#
#alias             set_default_lubuntu_path="export PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$'"
#alias set_default_lubuntu_path_with_yellow="export PS1='\[${BashYellow}\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w${BashColorEnd}\$'"
#alias set_default_lubuntu_path_with_yellow="export PS1='\[${BashYellow}\u@\h: \w\a\]${BashColorEnd}\$'"
#alias set_default_lubuntu_path_with_yellow="export PS1='\[${BashYellow}\u@\H: \w\a\][\#]${BashColorEnd}\$'"
#alias set_default_lubuntu_path_with_yellow="export PS1='\[${BashYellow}\u@\H: \w\a\]${BashColorEnd}\$'"
#alias set_default_lubuntu_path_with_yellow="export PS1='\[${BashYellow}\]\u@\H:\w\[${BashColorEnd}\][\#]$'"
####update the color variable formate
#alias              set_default_lubuntu_path="export PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$'"
alias              set_default_lubuntu_path="export PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$'"
#alias set_default_lubuntu_path_with_yellow="export PS1='${BashYellow}\u@\H:\w${BashColorEnd}[\#]$'"
alias  set_default_lubuntu_path_with_yellow="export PS1='${BashYellow}\u@\H:\w${BashColorEnd}${BashLightGreen}[\#]${BashColorEnd}$'"
alias set_default_lubuntu_path_with_yellow1="export PS1='${BashYellow}\u@\H:\W${BashColorEnd}${BashLightGreen}[\#]${BashColorEnd}$'"
#####set default with color by default
#set_default_lubuntu_path_with_yellow
#export PS1=``\s-\v\$ ''
#echo "PS1 is $PS1"
set_full_path

alias wget.c='  wget -c '
alias wget.L='  wget -L '
# curl - transfer a URL
alias curlCL='  curl -CL '
alias curlL='   curl -L '
#alias curlCLO=' curl -CL -O '
alias curl.L.O=' curl -L -O '

#scala env setting
if [ -d /home/fshan/.local/share/coursier/bin ]; then
  export PATH="/home/fshan/.local/share/coursier/bin:$PATH"
fi
# https://www.scala-sbt.org/1.x/docs/Running.html
# https://www.scala-sbt.org/1.x/docs/Command-Line-Reference.html
# https://www.scalawilliam.com/essential-sbt/
alias sbt.new='                      sbt new '
alias sbt.task='                     sbt task '
alias sbt.about='                    sbt about '
alias sbt.clean='                    sbt clean '
alias sbt.clearCaches='              sbt clearCaches '
alias sbt.compile='                  sbt compile '
alias sbt.recompile='                sbt ~compile '
alias sbt.test='                     sbt test '
alias sbt.testcompile='              sbt test:compile '
alias sbt.testonly='                 sbt test:testOnly '
alias sbt.testQuick='                sbt ~testQuick '
alias sbt.console='                  sbt console '
alias sbt.run='                      sbt run '
alias sbt.package='                  sbt package '
alias sbt.reload='                   sbt reload '
alias sbt.project='                  sbt project '
alias sbt.projects='                 sbt projects'
alias sbt.publishLocal='             sbt publishLocal'
alias sbt.inspect='                  sbt inspect '
alias sbt.inspectactual='            sbt "inspect actual console"'
alias sbt.settings='                 sbt settings '
alias sbt.settings.v='               sbt "settings -v"'
alias sbt.tasks='                    sbt tasks '
alias sbt.tasks.v='                  sbt "tasks -v"'
alias sbt.projects='                 sbt projects '
alias sbt.showversion='              sbt "show version"'
alias sbt.scalaVersion='             sbt scalaVersion'
alias sbt.crossScalaVersions='       sbt crossScalaVersions'
alias sbt.classDirectory='           sbt classDirectory'
alias sbt.baseDirectory='            sbt baseDirectory'
alias sbt.libraryDepend='            sbt libraryDependencies'
alias sbt.managedResourceDir='       sbt managedResourceDirectories'
alias sbt.assembly='                 sbt assembly'
alias sbt.publishLocal='             sbt publishLocal'
alias sbt.evicted='                  sbt evicted'

alias idea.community="intellij-idea-community "

#------------------------------
#mill Built-in commands
alias mill.watch='                    mill --watch '
alias mill.__.compile='               mill __.compile '
alias mill.__.run='                   mill __.run '
alias mill.init='                     mill init '
alias mill.resolve='                  mill resolve '
#info# mill resolve foo._
alias mill.resolve.compile='          mill resolve _.compile'
alias mill.resolve.compil.eall='      mill resolve __.compile'
alias mill.resolve.run='              mill resolve _.run'
alias mill.resolve.runall='           mill resolve __.run'
alias mill.resolve.test='             mill resolve _.test'
alias mill.resolve.testall='          mill resolve __.test'
#info#List what tasks are available to run:
alias mill.resolve._='                mill resolve _'
#info#see a full list of the different tasks that are available
alias mill.resolve.__='               mill resolve __'
alias mill.inspect='                  mill inspect '
#info# mill inspect foo.run
#info# mill inspect foo._
alias mill.inspect.compile='          mill inspect _.compile'
alias mill.inspect.compileall='       mill inspect __.compile'
alias mill.inspect._='                mill inspect _'
alias mill.inspect.__='               mill inspect __'
alias mill.describe='                 mill describe '
#info# mill describe ops[2.12.4].compile
alias mill.show='                     mill show '
#info# mill show foo.scalaVersion
alias mill.show.Named='               mill showNamed '
alias mill.show._='                   mill show _'
alias mill.show.__='                  mill show __'
alias mill.path='                     mill path '
#info# mill path foo.assembly foo.sources
alias mill.path_='                    mill path _'
alias mill.plan='                     mill plan '
#info# mill plan foo.compileClasspath
alias mill.show.visualize='           mill show visualize '
alias mill.show.visualizePlan='       mill show visualizePlan '
alias mill.clean='                    mill clean '
alias mill.clean.compile='            mill clean _compile'
alias mill.clean.compile.all='        mill clean __compile'
#Search for dependency updates
alias mill.searchdepend='             mill mill.scalalib.Dependency/showUpdates'
#Detecting transitive dependencies
alias mill._.ivyDepsTree='            mill _.ivyDepsTree '
alias mill.__.ivyDepsTree='           mill __.ivyDepsTree '
#The Build REPL
alias mill.build.repl='               mill --repl '
#Deploying your code
#
#Integrating IntelliJ with Mill
alias mill.scalalib.GenIdea='       mill  -j 2  mill.scalalib.GenIdea/idea'
alias mill.idea.GenIdea='           mill  -j 2  mill.idea.GenIdea/idea'
alias mill.idea.GenIdea.debug='     mill  -j 2  mill.idea.GenIdea/idea --debug'
alias mill.bsp.Install='            mill  -j 2  -i mill.bsp.BSP/install'
alias mill.bsp.Install.debug='      mill  -j 2  -i mill.bsp.BSP/install --debug'

#####
if [ -f ~/data/myenv/mill-bash-completion/mill.complete.sh ]; then
  source ~/data/myenv/mill-bash-completion/mill.complete.sh
fi

if [ -f /usr/local/lib/bazel/bin/bazel-complete.bash ]; then
  source /usr/local/lib/bazel/bin/bazel-complete.bash
fi

#-----bazel start-------------------------
alias bazel.help="      bazel help "
alias bazel.build="     bazel build "
alias bazel.run="       bazel run "
alias bazel.test="      bazel test "
alias bazel.query="     bazel query "
alias bazel.clean="     bazel clean "
alias bazel.version="   bazel version "
#-----bazel end-------------------------

#------------------------------
#chinese display support
#add following part into /etc/profile
export LC_ALL=C.UTF-8
export LANG=C.UTF-8
#------------------------------

#python alias
alias python3.m.venv='                    python3 -m venv '
#Example#python3 -m venv VirtualEnvName ; cd VirtualEnvName; source bin/activate; pip3 list
#deactivate
alias python3.m.pip.install='             python3 -m pip install'
alias python3.m.pip.install.upgrade.pip=' python3 -m pip install --upgrade pip'
alias python3.m.pip.list='                python3 -m pip list'

if [ -d /opt/riscv/bin ]; then
  export PATH=$PATH:/opt/riscv/bin
fi

if [ -d ~/miniconda3/bin ]; then
  export PATH=$PATH:~/miniconda3/bin
fi
#------------------------------
# conda --help
# usage: conda [-h] [-V] command ...
# conda is a tool for managing and deploying applications, environments and packages.
# Options:
# positional arguments:
#   command
#     clean             Remove unused packages and caches.
#     compare           Compare packages between conda environments.
#     config            Modify configuration values in .condarc. This is modeled after the git config command. Writes to the user
#                       .condarc file (/home/fshan/.condarc) by default. Use the --show-sources flag to display all identified
#                       configuration locations on your computer.
#     create            Create a new conda environment from a list of specified packages.
#     info              Display information about current conda install.
#     init              Initialize conda for shell interaction.
#     install           Installs a list of packages into a specified conda environment.
#     list              List installed packages in a conda environment.
#     package           Low-level conda package utility. (EXPERIMENTAL)
#     remove (uninstall)
#                       Remove a list of packages from a specified conda environment.
#     rename            Renames an existing environment.
#     run               Run an executable in a conda environment.
#     search            Search for packages and display associated information.The input is a MatchSpec, a query language for conda
#                       packages. See examples below.
#     update (upgrade)  Updates conda packages to the latest compatible version.
#     notices           Retrieves latest channel notifications.
# 
# options:
#   -h, --help          Show this help message and exit.
#   -V, --version       Show the conda version number and exit.
# 
# conda commands available from other packages (legacy):
#   content-trust
#   env
#   lock
#
# conda command info
# https://docs.conda.io/projects/conda/en/latest/commands/index.html
#
# conda alias
alias conda.activate='   conda activate '
alias conda.deactivate=' conda deactivate '
#
alias conda.create='        conda create '
# alias condacreatename=' conda create -n '
alias conda.create.name='   conda create --name '
# conda create --name new_base_name python=3.8
#info#alias condacreaten='conda create --name new_base_name '
alias conda.create.pwd='    conda create  --prefix `pwd`'
# conda create --prefix /tmp/test-env -name EnvName python=3.8
# conda create --prefix FullPath --yes --name EnvName python=3.8
# conda create -p FullPath -y -n EnvName python=3.10
#
alias conda.rename='        conda rename '
# conda rename -n test123 test321
# conda rename --name test123 test321
# #info#will move the conda env to home path
# conda rename -p path/to/test123 test321
# conda rename --prefix path/to/test123 test321
#
alias conda.remove='        conda remove '
alias conda.remove='        conda remove '
alias conda.remove.name='   conda remove -n '
# conda remove -n EnvName RemovingModuleName
# conda remove --name old_env_name --all
#
alias conda.install='       conda install '
# conda install python=3.8
alias conda.install.name='  conda install --name '
#
#info#alias condaconfigadd="conda config --add channels conda-forge"
#info#alias condaconfigconfig="conda config --set channel_priority strict"
#info#alias condaconfiginstall="conda install <package-name>"
alias conda.version='       conda --version '
#
alias conda.update.conda='  conda update conda '
alias conda.update.all='    conda update --all '
#
alias conda.info.e='        conda info -e '
alias conda.info.env='      conda info --envs '
#
alias conda.list='          conda list '
alias conda.list.name='     conda list --name '
#
alias conda.search='        conda search '
#
alias conda.update='        conda update '
#
alias conda.config.add.channels='  conda config --add channels '
#
#conda env remove --name pybites
alias conda.env.export='  conda env export'
alias conda.env.config='  conda env config'
alias conda.env.create='  conda env create'
# conda create --clone old_base_name --name new_base_name
# alias conda.env.export='  conda env export'
alias conda.env.list='    conda env list'
alias conda.env.remove='  conda env remove'
alias conda.env.update='  conda env update'
#
# [conda workflow]
# 1. Creating and activating a new environment
#  conda create --name new_base_name
#  conda create --name new_base_name --no-default-packages python=3.8
#
#  conda create --prefix FullPath --yes --name EnvName python=3.8
#  conda create -p FullPath -y -n EnvName python=3.10
#
#  conda activate new_base_name
# 2. Adding packages from Anaconda and PyPi
#  conda install click
#  pip install daiquiri
#  conda list
# 3. Adding your local application source code
# 4. Saving the "project" environment
#  conda env export --file environment.yml
#  conda env export --from-history --file environment.yml
#  conda env export --no-builds --file environment.yml
# 5. Recreating the "project" environment
#  conda env create --file environment.yml
#  conda activate project
# 6 List env and activate env
#  conda env list
#  ## get the env name list, and activate specific env
#  conda activate env_name
#
# conda cheatsheet
# https://conda.io/projects/conda/en/latest/user-guide/cheatsheet.html
#
# ### QUICK START
## Tip: It is recommended to create a new environment for any new project or workflow.
### verify conda install and check version
###  conda info
#
### update conda in base environment
###  conda update -n base conda
#
### install latest anaconda distribution (see release notes)
### conda install anaconda=2022.05
#
### create a new environment (tip: name environment descriptively)
###  conda create --name ENVNAME
#
### activate environment (do this before installing packages)
###  conda activate ENVNAME
#
# ### CHANNELS AND PACKAGES
## Tip: Package dependencies and platform specifics are automatically resolved when using conda.
#
# list installed packages
#  conda list
#
# list installed packages with source info
#  conda list --show-channel-urls
#
# update all packages
#  conda update --all
#
# install a package from specific channel
#  conda install -c CHANNELNAME PKG1 PKG2
#
# install specific version of package
#  conda install PKGNAME=3.1.4
#
# install a package from specific channel
#  conda install CHANNELNAME::PKGNAME
#
# install package with AND logic
#  conda install “PKGNAME>2.5,<3.2”
#
# install package with OR logic
#  conda install “PKGNAME [version=’2.5|3.2’]”
#
# uninstall package
#  conda uninstall PKGNAME
#
# view channel sources
#  conda config --show-sources
#
# add channel
#  conda config --add channels CHANNELNAME
#
# set default channel for pkg fetching (targets first channel in channel sources)
#  conda config --set channel_priority strict
#
# ### WORKING WITH CONDA ENVIRONMENTS
## Tip: List environments at the beginning of your session. Environments with an asterisk are active.
# list all environments and locations
#  conda env list
#
# list all packages + source channels
#  conda list -n ENVNAME --show-channel-urls
#
# install packages in environment
#  conda install -n ENVNAME PKG1 PKG2
#
# remove package from environment
#  conda uninstall PKGNAME -n ENVNAME
#
# update all packages in environment
#  conda update --all -n ENVNAME
#
# ### ENVIRONMENT MANAGEMENT
## Tip: Specifying the environment name confines conda commands to that environment.
# create environment with Python version
#  conda create -n ENVNAME python=3.10
#
# clone environment
#  conda create --clone ENVNAME -n NEWENV
#
# rename environment
#  conda rename -n ENVNAME NEWENVNAME
#
# delete environment by name
#  conda remove -n ENVNAME --all
#
# list revisions made to environment
#  conda list -n ENVNAME --revisions
#
# restore environment to a revision
#  conda install -n ENVNAME --revision NUMBER
#
# uninstall package from specific channel
#  conda remove -n ENVNAME -c CHANNELNAME PKGNAME
#
# ### EXPORTING ENVIRONMENTS
## Recommendation: Name the export file “environment.” Environment name will be preserved.
# cross-platform compatible
#  conda env export --from-history>ENV.yml
#
# platform + package specific
#  conda env export ENVNAME>ENV.yml
#
# platform + package + channel specific
#  conda list --explicit>ENV.txt
#
# ### IMPORTING ENVIRONMENTS
## Tip: When importing an environment, conda resolves platform and package specifics.
# from a .yml file
#  conda env create -n ENVNAME --file ENV.yml
#
# from a .txt file
#  conda create -n ENVNAME --file ENV.txt

# ### ADDITIONAL HINTS
# get help for any command
#  conda COMMAND --help
#
# get info for any package
#  conda search PKGNAME --info
#
# run commands w/o user prompt eg, installing multiple packages
#  conda COMMAND ARG --yes
#  conda install PKG1 PKG2 --yes
#
# remove all unused files
#  conda clean --all
#
# examine conda configuration
#  conda config --show
#
#------------------------------

#alias set_default_lubuntu_path="export PS1='\[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$'

#\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]$

# \[\e]0;\u@\h: \w\a\]${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$

##alias set_full_path="export PS1='\[\e]0;\u@\h:_\w\a\]${debian_chroot:+($debian_chroot)}\u@\h:\w\$'"
#alias set_shor_path="export PS1='[\u@\h_\W]\$'"
###$#following info got from man bash
###$       PS1    The value of this parameter is expanded (see PROMPTING below) and used as the primary  prompt  string.   The  default  value  is``\s-\v\$ ''.
###$       PS2    The value of this parameter is expanded as with PS1 and used as the secondary prompt string.  The default is ``> ''.
###$       PS3    The value of this parameter is used as the prompt for the select command (see SHELL GRAMMAR above).
###$       PS4    The  value of this parameter is expanded as with PS1 and the value is printed before each command bash displays during an execution trace.  The first character of PS4 is replicated multiple times, as necessary, to indicate multiple levels of  indirection. The default is ``+ ''.
###$
###$      PROMPTING
###$       When executing interactively, bash displays the primary prompt PS1 when it is ready to read a command, and  the  secondary  prompt  PS2
###$       when  it needs more input to complete a command.  Bash allows these prompt strings to be customized by inserting a number of backslash- escaped special characters that are decoded as follows:
###$              \a     an ASCII bell character (07)
###$              \d     the date in "Weekday Month Date" format (e.g., "Tue May 26")
###$              \D{format}
###$                     the format is passed to strftime(3) and the result is inserted into the prompt string;  an  empty  format  results  in  a locale-specific time representation.  The braces are required
###$              \e     an ASCII escape character (033)
###$              \h     the hostname up to the first `.'
###$              \H     the hostname
###$              \j     the number of jobs currently managed by the shell
###$              \l     the basename of the shell's terminal device name
###$              \n     newline
###$              \r     carriage return
###$              \s     the name of the shell, the basename of $0 (the portion following the final slash)
###$              \t     the current time in 24-hour HH:MM:SS format
###$              \T     the current time in 12-hour HH:MM:SS format
###$              \@     the current time in 12-hour am/pm format
###$              \A     the current time in 24-hour HH:MM format
###$              \u     the username of the current user
###$              \v     the version of bash (e.g., 2.00)
###$              \V     the release of bash, version + patch level (e.g., 2.00.0)
###$              \w     the current working directory, with $HOME abbreviated with a tilde (uses the value of the PROMPT_DIRTRIM variable)
###$              \W     the basename of the current working directory, with $HOME abbreviated with a tilde
###$              \!     the history number of this command
###$              \#     the command number of this command
###$              \$     if the effective UID is 0, a #, otherwise a $
###$              \nnn   the character corresponding to the octal number nnn
###$              \\     a backslash
###$              \[     begin a sequence of non-printing characters, which could be used to embed a terminal control sequence into the prompt
###$              \]     end a sequence of non-printing characters
###$
###$       The  command  number and the history number are usually different: the history number of a command is its position in the history list, which may include commands restored from the history file (see HISTORY below), while the command number is the position in the sequence of  commands  executed  during the current shell session.  After the string is decoded, it is expanded via parameter expansion, command substitution, arithmetic expansion, and quote removal, subject to the value of the promptvars shell option (see the description of  the shopt command under SHELL BUILTIN COMMANDS below).
#
echo "======================================"
echo "Updated path info:"
#echo $path
echo $PATH
