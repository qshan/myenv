#!/bin/bash

#replace contents the c file in the TargetPathName, the contents changing is like this:
#HWIO_OUTXF ( basename, xxxxx) -> HWIO_OUTF (xxxxx) 
find TargetPathName -type f -iname "*.c" |xargs sed -i 's/HWIO_OUTXF\s*(\s*[a-zA-Z0-9_\-]*\s*,\s*/HWIO_OUTF (/g'

#replace the keywords and generate a new file
sed 's/Word_searched/word_target/g' input_file > outputfile

#replace the keywords in targetfile
sed -i 's/Word_searched/word_target/g' File_name_replaced

sed -i -r 's/Word_searched/word_target/g' File_name_replaced

sed -i -E "s/\s*Addr:(0[xX][0-9a-fA-F]*).*:Data:#(0[xX][0-9a-fA-F]*).*/      <register address='\1' value='\2' \/>/g" Cypress_FF_reg_dump_after_wla_pass_BBB_20190822.xml

#delete the empty line (cover write space) in targetfile
sed  -i '/^\s*$/d' data.txt

#delete the empty line (cover write space) and generate a new file
sed '/^\s*$/d' data.txt  > data.update.txt

# Example: delete the 4th line in a file
$ sed '4d' input.txt > output.txt

# Example: replace every occurrence of 'hello' with 'world' on lines 10-20
$ sed '10,20s/hello/world/' input.txt > output.txt

find ./CONFIG -type f -exec sed -i "s/_HOME_DIR_/$_HOME_DIR/g" {} \;
find . -type f -exec sed -i 's/foo/bar/g' {} +

#copy when source file is newer than destination file
find SearchPath -type f -iname SearchPattern | xargs -I{} cp -u {} TargetCopyPath
#forcely copy the source file to destination
find SearchPath -type f -iname SearchPattern | xargs -I{} \cp -f {} TargetCopyPath

find SearchPath -type f -iname SearchNamePattern | xargs -I{} cp  {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs -I{} mv {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs -I{} \mv -f {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs \grep --color -oi grepPattern

#forcely remove the folder in the SearchPath
find SearchPath -type d -iname "*" | xargs \rm -rf
find ./* -type d -iname "*" | xargs \rm -rf

grep -RiIl 'SearchPattern' SearchPath | xargs sed -i 's/search/replace/g'

env | sort
ln -sTf SourceFolderName TargetLinkerName
ln -snf SourceFolderName TargetLinkerName

#check the key details in the SHELL you used
#list binding key details info in tcsh
bindkey -b
#list binding key details info in bash
man bash
#search Commands for Moving

#--------------------------------------------------
#command for git maintain

#git remote add [shortname] [url]

#git clone --recursive git@github.com:qshan/myenv.git

#git remote

#git branch

#git fetch origin

#git pull

#git pull FileNameWithPath

#git add New_File_With_Path

#git commit -am "update bashrc description"

#git push

#git push origin master

#git push origin :

#git add/rm <file>... # to update what will be committed

#git checkout -- <file>... # to discard changes in working directory

#git checkout TagVersionNameYouNeed

#git checkout BranchNameWithPath

#git checkout HEAD
#git checkout master

#git checkout HEAD^
#git checkout HEAD~1

#git checkout HEAD^^
#git checkout HEAD~2
#--------------------------------------------------
#      git-command               WorkingDiretory           Stage/Index               History
#git add                              Y             ->         Y
#git commit                                                    Y            ->          Y
#git checkout                         Y                       <-                        Y
#git reset --soft                                              Y             <-         Y
#git reset --mixed                    Y                       <-                        Y
#git reset --hard        (deleted)                            <-                        Y
#--------------------------------------------------

#git rm --cached <file>

#git reset HEAD <file>...

#git status

#git log

#git log -p

#git log -p -3

#git log --stat

#git log --pretty

#git log --pretty=format:"%h - %an, %ar : %s"

#git log --pretty=format:"%h - %an, %ar : %s" --graph

#git tag

#git tag -l "Tag_keyword_info"

#git tag -a TagVersionName -m "comments for this version tag"

#git show TagVersionName

#git push origin TagVersionNameYouWantToShare

#git push origin --tags


#git status -s

#git diff FileName

#git diff --cached FileName

#git diff HEAD

#git diff --stat

#git diff Branch1 Branch2

#git diff Branch1 Branch2 --stat
#--------------------------------------------------

#sudo \rm -f  /var/lib/dpkg/info/git-el.postinst

#sudo apt-get install -y NameOfSoftware
#sudo apt-get -f install
#sudo apt-get install --reinstall NameOfSoftware
#sudo apt-get autoremove NameOfSoftware

#sudo apt-get install autotools-dev automake gettext gettext-el
#http://ftp.gnu.org/gnu/automake/
#http://ftp.gnu.org/gnu/automake/automake-1.16.tar.xz
#http://ftp.gnu.org/gnu/automake/automake-1.16.3.tar.xz

#sudo apt-cache search KeyWordsSearched

#sudo apt-get install -y gettext gettext-base gettext-doc gettext-el gettext-lint libgettextpo0 libgettextpo-dev
#sudo apt-get install -y libsysfs-dev
#sudo apt-get install pkg-config pkg-config-aarch64-linux-gnu
#sudo apt-get install libncurses5 libncurses5-dbg libncurses5-dev lib64ncurses5 lib64ncurses5-dev
#sudo apt-get install gdb gdb64 gdb-source gdb-doc gdb-dbg gdb-multiarch xxgdb

#sudo apt-get install libiconv-hook-dev
#sudo apt-get install libtool
#sudo apt-get install linkchecker linkchecker-gui linklint link-grammar
#sudo apt-get install intltool intltool-debian autopoint libint-dev
#sudo apt-get install libgtk2.0-dev libgtk2.0-common libgtk-3-dev libgtk-3-common



#sudo apt-get install kdbg
