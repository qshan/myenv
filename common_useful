#!/bin/bash


#ubuntu official ppa
#https://ubuntuhandbook.org/index.php/2023/11/lubuntu-2204-lxqt-140-ppa/
sudo add-apt-repository ppa:lubuntu-dev/backports

#replace contents the c file in the TargetPathName, the contents changing is like this:
#HWIO_OUTXF ( basename, xxxxx) -> HWIO_OUTF (xxxxx)
find TargetPathName -type f -iname "*.c" |xargs sed -i 's/HWIO_OUTXF\s*(\s*[a-zA-Z0-9_\-]*\s*,\s*/HWIO_OUTF (/g'

#replace TAB_Key with white space in files, input the TAB_Key with C-V TAB
find TargetPathName -type f -iname "*.c" |xargs sed -i 's/	/  /g'

#example of find/grep/sed
find ./PathSearched -iname "*.[ch]" | xargs grep -rnE --color "(HWIO_.*)I(\s*\(CADENCE_DDR_CONTROLLER_DENALI_CTL_[0-9]+)_I,\s*ch(.*)"
find ./PathSearched -iname "*.[ch]" | xargs grep -rnE --color "(HWIO_.*)I(\s*\(CADENCE_DDR_CONTROLLER_DENALI_CTL_[0-9]+)_I,\s*ch(.*)" |wc -l
find ./PathSearched -iname "*.[ch]" | xargs sed -i -E --color "s/(.*HWIO_.*)I(\s*\(CADENCE_DDR_CONTROLLER_DENALI_CTL_)0*([1-9]+)_I,\s*ch(.*)/\1\2\3\4/g" |wc -l
find ./PathSearched -iname "*.[ch]" | xargs grep -rnE --color "(HWIO_.*)(\s*\(CADENCE_DDR_CONTROLLER_DENALI_CTL_[0-9]+)(.*)" |wc -l

#replace the keywords and generate a new file
sed 's/Word_searched/word_target/g' input_file > outputfile

# install python module
python3 -m pip install <package_name>
pip3 install <package_name>

#save the output info into file. To use ">", let standard output stream redirected to file Info.log.txt.
RunCommandToGetInfo > Info.log.txt
#
#To use ">", let standard output stream redirected to file Info.log.txt. “2>&1” at the end of the command. These symbols tell that the second standard stream ( standard error stream ) needs to be directed at the first standard stream (standard output stream) permanently for this command.
RunCommandToGetInfo > Info.log.txt 2>&1
#
#To use "2>". These symbols tell that the second standard stream ( standard error stream ) needs to be directed to ErrorInfo.log.txt.
RunCommandToGetInfo 2> ErrorInfo.log.txt
#
RunCommandToGetInfo > Info.log.txt 2> ErrorInfo.log.txt
ls exitedFileInFolder noExitedFileInFolder > Info.log.txt 2> ErrorInfo.log.txt

#replace the keywords in targetfile
sed -i 's/Word_searched/word_target/g' File_name_replaced

cat *.d | awk -F ":" '{ print $2 }' | sort -u | xargs ctags
cat *.d | awk -F: '{ print $2 }' | sort -u | xargs ctags
cat *.d | awk -F: '{ print $1 }' | sort -u | xargs ctags
cat *.d | awk -F: '{ print $1 }' |sed -i 's/\ \+\\/ /g' | xargs ctags-universal
cat *.d | awk -F: '{ print $1 }' |sed -i 's/\ \+\\/ /g' | xargs ctags

cat  main.cpp.o.1.d |  awk -F: '{ print $1 }'
cat  main.cpp.o.1.d | sed  's/\ \+\\/ /'
cat  main.cpp.o.1.d | gawk -F ':' '{ print $1 }' | sed 's/\ \+\\/ /'
cat  main.cpp.o.1.d | awk '-F ":" { print $1 }' | sed 's/\ \+\\/ /'

cat  main.cpp.o.1.d | gawk -F:  '{ print $1 }' | sed 's/\ \+\\/ /'

cat  main.cpp.o.1.d |  awk -F: '{ print $1 }' | sed 's/.*\.o/ /' | sed 's/\ \+\\/ /'

cat  main.cpp.o.1.d | sed 's/.*\.o:/ /'
cat  main.cpp.o.1.d | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /'
cat  main.cpp.o.1.d | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs ctags -R
cat  main.cpp.o.1.d | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs 'ctags-universal -R    --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs '

find ./ -type f -iname *.o.d |xargs cat | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs ctags-universal --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs
find ./ -type f -iname *.o.d |xargs cat | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs ctags-universal --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R

# worked
rm tags
find `pwd` -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R
find ./ -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R
#find ./ -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R

#debugging
find `pwd` -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo  > filelist.o.d.cat.sort.rm.o.rm.ext.echo.txt

find `pwd` -type f -iname *.o.d |xargs cat | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R
find `pwd` -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R

find `pwd` -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo
|xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R

find `pwd` -type f -iname *.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R

find ./CMakeFiles/olympia.dir/sim -type f -iname *.o.d |xargs cat | sort -u | sed 's/.*\.o:/ /' | sed 's/\ \+\\/ /' |xargs echo |xargs ctags-universal --append=yes --languages=C,C++,C#,Asm,make --c++-kinds=+lpx --fields=+iaS --extras=+qfrs -R

ctags -L filelist

sed -i -r 's/Word_searched/word_target/g' File_name_replaced

sed -i -E "s/\s*Addr:(0[xX][0-9a-fA-F]*).*:Data:#(0[xX][0-9a-fA-F]*).*/      <register address='\1' value='\2' \/>/g" Cypress_FF_reg_dump_after_wla_pass_BBB_20190822.xml

#replase the space on the end of line in that files
#sed -i 's/\s\+\$/\$/g' File_name_replaced
#worked in bash
sed -i 's/\s\+$//g' File_name_replaced
#ToCheck#try in others
sed -i 's/\s\+\$//g' File_name_replaced

#find the specific named file and replase the space on the end of line in that files
#worked
find TargetPathName -type f -iname "*.[c|h]" | xargs sed -i "s/\s\+\$//g"
find TargetPathName -type f -iname "*.[c|h]" | xargs sed -i 's/\ \+$//g'

#delete the empty line (cover write space) in targetfile
sed  -i '/^\s*$/d' data.txt

#delete the empty line (cover write space) and generate a new file
sed '/^\s*$/d' data.txt  > data.update.txt

# Example: delete the 4th line in a file
$ sed '4d' input.txt > output.txt

# Example: replace every occurrence of 'hello' with 'world' on lines 10-20
$ sed '10,20s/hello/world/' input.txt > output.txt

#replace(,0x0001) to (,0x1), replace (,0x0000) to (,0x0)
sed  -i -r 's/,0x0+/,0x/g' data.txt
sed  -i 's/,0x)/,0x0)/g' data.txt

find ./CONFIG -type f -exec sed -i "s/_HOME_DIR_/$_HOME_DIR/g" {} \;
find . -type f -exec sed -i 's/foo/bar/g' {} +

#Good#find multi-extention file with find
find SearchPath -type f \( -iname *.mobi -o -iname *.epub \)

#Good#find files in multi-path
find SearchPath01 SearchPath02 -type f

#copy when source file is newer than destination file
find SearchPath -type f -iname SearchPattern | xargs -I{} cp -u {} TargetCopyPath
#forcely copy the source file to destination
find SearchPath -type f -iname SearchPattern | xargs -I{} \cp -f {} TargetCopyPath

find SearchPath -type f -iname SearchNamePattern | xargs -I{} cp {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs -I{} mv {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs -I{} \mv -f {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs \grep --color -oi grepPattern

find SearchPath -type f -print
#find and print the info into one line
find SearchPath -type f -print0

#file name only with %f, print the info into one line
find SearchPath -type f -printf %f
#file name with path with %p, print the info into one line
find SearchPath -type f -printf %p
#path list with %h, print the info into one line
find SearchPath -type f -printf %h
#ToCheck
#get the file name without path
find SearchPath -type f | xargs -I{} basename {}
#get the file name without path and without trailing SUFFIX
find SearchPath -type f -iname "*.pdf" | xargs -I{} basename {} .pdf
find SearchPath -type f -iname "*.pdf" | xargs -I{} basename -s .pdf {}
#
#get the path info of FileSearched
find SearchPath -type f -iname "*.pdf" | xargs -I{} dirname {}
#get the path info of FolderSearched
find SearchPath -type d -iname KeyWordSearched | xargs -I{} dirname {}

#find the file with specific property/feature
find SearchPath -type f -writable
find SearchPath -type f -readable
find SearchPath -type f -executable

find Todo_SearchPath -type f -executable    | xargs chmod a-x
find Todo_SearchPath -type f -writable      | xargs chmod a-w
find Todo_SearchPath -type f -iname "*.pdf" | xargs chmod a-x

#forcely remove the folder in the SearchPath
find SearchPath -type d -iname "*" | xargs \rm -rf
find ./* -type d -iname "*" | xargs \rm -rf

#regular express
#   ?     :match any single character
#   *     :match zero or more characters
#   []    :match list of characters in the list specified
#   [!]   :match character not in the list specified

grep -RiIl 'SearchPattern' SearchPath | xargs sed -i 's/search/replace/g'

#search the space on end of line
#one space char
grep -rni '\ \$'  SearchPath
#multi space chars
grep -rni "\s\+\$"  SearchPath
grep -rni '\ \+$'  SearchPath
#one space char from line start
grep -rni '^.*\ \$'  SearchPath
#multi space chars from line start
grep -rni '^.*\ \+\$'  SearchPath

#rename the file name with replace the space with underline
rename  's/\s+/_/g' FileName
rename -v 's/\s+/_/g' FileName
#To translate uppercase names to lower, you'd use
rename 'y/A-Z/a-z/' *

find FolderNameSearched -type f | xargs -I{} rename 's/[(|)|\[|\]|{|}|&|,|'|\!|-|\s]+/_/g' {}
find FolderNameSearched -type f | xargs -I{} rename 's/[(|)|\[|\]|{|}|&|,|'|\!|-|\+|\s]+/_/g' {}

# Save the log with tee
ping google.com | tee output.txt
ping google.com 2>&1 | tee output.txt
ping google.com 2>&1 | tee -a output.txt
ls | tee -a [file]
ls file* | tee output.txt | wc -l
# Write file with elevate privileges
:w !sudo tee %
# The -i command line option enables tee to ignore the interrupt signal (SIGINT), which is usually issued when you press the crl+c key combination.
[command] | tee -i [file]

# Device or resource busy issue - resolved
# lsof +D PathNameOfBadFile

env | sort
ln -sTf SourceFolderName TargetLinkerName
ln -snf SourceFolderName TargetLinkerName

#get the shell info in current shell
sh -c 'ps -p $$ -o ppid=' | xargs ps -o comm= -p

#check the key details in the SHELL you used
#list binding key details info in tcsh
bindkey -b
#list binding key details info in bash
man bash
#search Commands for Moving

#checkout myenv with git
# $git clone --recursive git@github.com:qshan/myenv.git

#sudo \rm -f  /var/lib/dpkg/info/git-el.postinst
#
##force overwrie the confilct package or lib
#sudo dpkg -i --force-overwrite theDebYouWantToInstall.deb
#sudo apt-get --fix-broken install

# check the package info list
sudo apt list
# check the package installed in env
sudo apt list --installed
# check the specific package installed in env
sudo apt list vim* --installed

# install language support completely in ubuntu
# sudo apt install --reinstall $(check-language-support)

sudo apt install lubuntu-default-session lubuntu-default-settings lubuntu-desktop

#sudo apt-get install -y NameOfSoftware
#sudo apt-get -f install
#sudo apt-get install --reinstall NameOfSoftware
#sudo apt-get autoremove NameOfSoftware

#sudo apt-get install autotools-dev automake gettext gettext-el
#http://ftp.gnu.org/gnu/automake/
#http://ftp.gnu.org/gnu/automake/automake-1.16.tar.xz
#http://ftp.gnu.org/gnu/automake/automake-1.16.3.tar.xz

#sudo apt-cache search KeyWordsSearched

#--------------------------------------------------
#sudo apt-get install -y gettext gettext-base gettext-doc gettext-el gettext-lint libgettextpo0 libgettextpo-dev
#sudo apt-get install -y libsysfs-dev
#sudo apt-get install pkg-config pkg-config-aarch64-linux-gnu pkgconf
#sudo apt-get install libncurses5 libncurses5-dbg libncurses5-dev lib64ncurses5 lib64ncurses5-dev
#sudo apt-get install gdb gdb64 gdb-source gdb-doc gdb-dbg gdb-multiarch xxgdb

#sudo apt-get install libiconv-hook-dev
#sudo apt-get install libtool
#sudo apt-get install linkchecker linkchecker-gui linklint link-grammar
#sudo apt-get install intltool intltool-debian autopoint libint-dev
#sudo apt-get install libgtk2.0-dev libgtk2.0-common libgtk-3-dev libgtk-3-common libgtk2.0-bin libgtk-3-bin
#sudo apt-get install autoconf autoconf-archive automake libtool libtool-bin
#sudo apt-get install libglib2.0-dev libglib3.0-cil-dev

#issue libsdl2-dev : Depends: libsdl2-2.0-0 (= 2.0.10+dfsg1-3) but 2.0.10+dfsg1-3ubuntu0.1~esm1 is to be installed
sudo apt-get install aptitude
sudo aptitude install libsdl2-dev



#issue 'AM_ICONV_LINK' not found in library
#To check where aclocal is looking for m4 files
#$(aclocal --print)
#if you get this path, /usr/local/share/aclocal, then check if the *.m4 file is in this path
#if *.m4 files is in this path, /usr/share/aclocal/*.m4, then create the linker on the path aclocal needed
#$cd /usr/local/share/aclocal; ln -s /usr/share/aclocal/*.m .
#or add prefix to figure out the path of *.m4 file for aclocal, like,
#$aclocal -I /usr/share/aclocal
#or add alias for aclocal with this prefix, like
#bash#$ alias aclocal='\aclocal -I /usr/share/aclocal'
#tcsh#$ alias aclocal '\aclocal -I /usr/share/aclocal'
#--------------------------------------------------

#add wirte access of FileName for all of users (user/groups/others)
chmod a+w FileName
#add read access of FileName for user/OwnerOfFile
chmod u+r FileName
#remove the write access of FileName for group
chmod g-w FileName
#set the access of FileName as x for others
chmod o=x FileName

#add
chmod +t FileName

# change the owner of FileName as UserName
chown UserName FileName

# change the owner of FolderName and subfolder as UserName
chown R UserName FolderName

# change the group of FileName as UserName
chgrp UserName FileName

# change the group of FolderName and subfolder as UserName
chgrp R UserName FolderName

##check linux details
#uname -a
#lsb_release -a
#TODO#sudo mv /etc/lsb-release-test /etc/lsb-release
#
#####install the linux kernel 5 on the ubuntu 18
##web linker: https://wiki.ubuntu.com/Kernel/LTSEnablementStack
##https://wiki.ubuntu.com/Kernel/LTSEnablementStack?_ga=2.265781775.1668484722.1677121937-1567260344.1670669551#Ubuntu_18.04_LTS_-_Bionic_Beaver
####Installing the HWE stack is simple:
##DESKTOP
# sudo apt-get install --install-recommends linux-generic-hwe-18.04 xserver-xorg-hwe-18.04 
##SERVER
# sudo apt-get install --install-recommends linux-generic-hwe-18.04 
#
#### install lubuntu onto the installed verison of ubuntu
#sudo apt install --no-install-recommends lubuntu-desktop

#==============================access android file with linux shell start==============================
##browser the detail of folder contents
# ls /run/user/1000/gvfs/
# ls /run/user/1000/gvfs/mtp*
#==============================access android file with linux shell end==============================

#sudo apt-get install kdbg
#==============================the command related to disk start==============================
#check the id and label info about the disk
ls -alh /dev/disk/by-uuid
#
ls -alh /dev/disk/by-partuuid
ls -alh /dev/disk/by-id
ls -alh /dev/disk/by-label
ls -alh /dev/disk/by-path
#example of /etc/fstab
## <file system>                             <mount point>         <type>  <options>       <dump>  <pass>
## / was on /dev/sdb1 during installation
#UUID=8bf41389-1993-4722-8d4e-b876897c6cd2   /                     ext4    errors=remount-ro 0       1
## swap was on /dev/sdb5 during installation
#UUID=67cc51ab-e762-4f7f-85bc-651d04358f66                       none            swap    sw              0       0
#
##/dev/sda1                                   /home/fshan/data/sda1 ext4   defaults,rw      0       0
#UUID=cbc98ca9-0f47-4d7f-b6e9-4ad2b4728612   /home/fshan/data/sda1 ext4   defaults,rw      0       0
#
##/dev/sdb                                    /data                 ext4   defaults,rw      0       0
#UUID=7eb38f56-b17e-4fe9-b39d-21d2ba984e3d   /data                 ext4   defaults,rw      0       0


#------------------------------
# $df -a
# $df -k
# $df -m
# $df -i
# $df -t ext3
# $df -x ext3
# $df -h
# $df -h /dev/sdc2
#------------------------------
# $pydf
#------------------------------
# $du -sh     NameOfFolder
# $du -sh     NameOfFolder/*
#------------------------------
####
# $sudo fdisk -l
# $sudo fdisk -l /dev/sdc
# $sudo fdisk /dev/sdc
# $sudo fdisk -s /dev/sdc2
#------------------------------
####
# $lsblk
#------------------------------
####
# $sudo blkid
#------------------------------
#------------------------------
####
# $sudo hwinfo --short --block
#------------------------------
####
# $cfdisk
# $sudo cfdisk /dev/sdc
# $sudo cfdisk /dev/sdc2
#------------------------------
####
# $sudo parted -l
#------------------------------
####
# $sudo sfdisk -l
#------------------------------
####
# $sudo mkfs.ext4      /dev/sdc2
# $sudo mkfs.msdos     /dev/sdc2
# $sudo mkfs.vfat      /dev/sdc2
# $sudo mkfs.fat       /dev/sdc2
# $sudo mkfs.ntfs      /dev/sdc2
# $sudo mkfs.vfat -n 'TempData' /dev/sdc2
#------------------------------
# $wipe
#------------------------------
# $dd
# $dd if=/dev/zero of=/dev/sda2 bs=512 count=1
#------------------------------
# $scrub    /dev/sdc2
# $
#==============================the command related to disk end  ==============================
#
#==============================update the grub manu start==============================
#gvim /boot/grub/grub.cfg
#search menuentry
#==============================update the grub manu end  ==============================

#==============================make udisk with unetbootin start==============================
####install unetbootin if there is no this sw in your pc
# $sudo apt install unetbootin
####list the disk info
# $sudo fdisk -l
####get the udisk location: /dev/sdc
#
# $sudo wipefs --all /dev/sdc
#
# $sudo fdisk -l
#
####make partition for udisk
# $sudo fdisk /dev/sdc
# $     ->       Command (m for help): n
# $     ->       Select (default p): p
# $     ->       Partition number (1-4, default 1): 1
# $     ->       First sector (2048-121110527, default 2048):
# $     ->       Last sector, +sectors or +size{K,M,G,T,P} (2048-121110527, default 121110527):
# $     ->       Do you want to remove the signature? [Y]es/[N]o: Y
# $     ->       Command (m for help): w
#
####dectect the udisk again
# $partprobe

# $sudo fdisk -l
####make dos format for udisk to support the writable of udisk
# $sudo cfdisk /dev/sdc
# $     ->       dos
# $     ->       new
# $     ->       primary
# $     ->       type
# $     ->       c W95 FAT32 (LBA)
# $     ->       Bootable
# $     ->       Attributes: 80
# $     ->       Write
# $     ->       Are you sure you want to write the partition table to disk? yes
#
###finally, the config is
###Partition type: W95 FAT32 (LBA) (c) Partition type: W95 FAT32 (LBA) (c)
###Attributes: 80
#
# $sudo umount PATH_OF_sdc1_MOUNTED
# $sudo mkfs.vfat -n 'TempData' /dev/sdc1
#
####mount the disk before udisk gen
# $mount /dev/sdb1
#
####make udisk
# $sudo unetbootin installtype=USB targetdrive=/dev/sdb1
#==============================make udisk with unetbootin end  ==============================

##mount the disk operation
# #check the info about the disk and partition
# sudo fdisk -alh
# sudo blkid
# ls /dev/disk/by-XXX -alh
#
# #mount the sdb1 on the specific path
# sudo mount -rw -t ext4 /dev/sdb1 /home/fshan/data
#
#####fstab contents example start#####
#     # <fs>            <mountpoint>    <type>        <opts>        <dump/pass>
#     # NOTE: If your BOOT partition is ReiserFS, add the notail option to opts.
#     /dev/sda10        /boot            ext4        noauto,noatime    1 2
#     /dev/sda6         /                ext4        noatime           0 1
#     /dev/sda9         none             swap        sw                0 0
#     /dev/cdrom        /mnt/cdrom       auto        noauto,ro         0 0
#     /dev/sdb1    /home/fshan/data/sdb1 ext4        defaults,rw       0 0
#
##explaination of opts
## defaults: rw,suid,dev,exec,auto,nouser,async
## auto : noauto
## rw   : ro
## exec : noexec
## sync : async
## user : nouser
#####fstab contents example end#####

#####alternative setting start#####
#
###install alternatives on the path
###update-alternatives:    --install <link>         <name>      <path>        <priority>
# sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.8 1
# sudo update-alternatives --install /usr/bin/python python /usr/bin/python3.5 2
# sudo update-alternatives --install /usr/bin/python python /usr/bin/python2.7 3

#sudo update-alternatives  --install  /usr/bin/python3 python3 /usr/bin/python3.6m 4
#
###set the python default as the python3
# sudo update-alternatives --config python
###then, select selection number: 3
#
#####alternative setting end#####

#####good download linker start#####
# http://archive.ubuntu.com/ubuntu/pool/universe/s/scons
#####good download linker end#####

#==============================download-file-methods start==============================
#--------------------------------------------------
####wget
# $wget -c TheLinkerOfRemoteFileName
#--------------------------------------------------
####download and upload file with curl
####download file
#### --netrc -n :Makes curl scan the .netrc file in the user's home directory for the login name and password
# $curl --netrc --remote-name ftp://ftp.example.com/file.bin
# $curl --netrc -O ftp://ftp.example.com/file.bin
####upload the file
# $curl --netrc --upload-file file.bin ftp://ftp.example.com/
# $curl --netrc -T file.bin ftp://ftp.example.com/
####upload file with UserName and Password
# $curl --user UserName:Password --upload-file file.bin ftp://ftp.example.com/
# $curl --user UserName:Password -T file.bin ftp://ftp.example.com/
#--------------------------------------------------
####ftp
# $ftp -in -u ftp:UserName:Password@servername/path/to/ localfile
#--------------------------------------------------
####sftp
# $sftp
#--------------------------------------------------
# $scp
# $scp -r FolderNameOnLocalWithFullPath UserName@ServerName.com:FullPathNameOfRemoteServerName

#==============================download-file-methods ent==============================
#==============================the-user-groups-management start==============================
####create a new user NewUserName
## $sudo adduser NewUserName -g root
####create a new user NewUserName and asign it as one of root group
## $sudo adduser NewUserName -g root
#--------------------------------------------------
####a sign a group GroupNameAssigned to OneUserName
## $sudo chmod OneUserName -g GroupNameAssigned
#--------------------------------------------------

#==============================the-user-groups-management ent==============================
# ubuntu-drivers devices
# sudo apt install --install-recommends --reinstall xserver-xorg-video-nouveau
# sudo apt install --install-recommends --reinstall nvidia-driver-390
# nvdia 390 driver install
# sudo nano/etc/modprobe . d/black list.conf
#
#todo# fshan# for cuda install
# blacklist nouveaou
# options nouveau modeset=0
###todo### sudo update-initramfs -u
