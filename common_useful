#!/bin/bash

#replace contents the c file in the TargetPathName, the contents changing is like this:
#HWIO_OUTXF ( basename, xxxxx) -> HWIO_OUTF (xxxxx)
find TargetPathName -type f -iname "*.c" |xargs sed -i 's/HWIO_OUTXF\s*(\s*[a-zA-Z0-9_\-]*\s*,\s*/HWIO_OUTF (/g'

#replace the keywords and generate a new file
sed 's/Word_searched/word_target/g' input_file > outputfile

#replace the keywords in targetfile
sed -i 's/Word_searched/word_target/g' File_name_replaced

sed -i -r 's/Word_searched/word_target/g' File_name_replaced

sed -i -E "s/\s*Addr:(0[xX][0-9a-fA-F]*).*:Data:#(0[xX][0-9a-fA-F]*).*/      <register address='\1' value='\2' \/>/g" Cypress_FF_reg_dump_after_wla_pass_BBB_20190822.xml

#delete the empty line (cover write space) in targetfile
sed  -i '/^\s*$/d' data.txt

#delete the empty line (cover write space) and generate a new file
sed '/^\s*$/d' data.txt  > data.update.txt

# Example: delete the 4th line in a file
$ sed '4d' input.txt > output.txt

# Example: replace every occurrence of 'hello' with 'world' on lines 10-20
$ sed '10,20s/hello/world/' input.txt > output.txt

#replace(,0x0001) to (,0x1), replace (,0x0000) to (,0x0)
sed  -i -r 's/,0x0+/,0x/g' data.txt
sed  -i 's/,0x)/,0x0)/g' data.txt

find ./CONFIG -type f -exec sed -i "s/_HOME_DIR_/$_HOME_DIR/g" {} \;
find . -type f -exec sed -i 's/foo/bar/g' {} +

#copy when source file is newer than destination file
find SearchPath -type f -iname SearchPattern | xargs -I{} cp -u {} TargetCopyPath
#forcely copy the source file to destination
find SearchPath -type f -iname SearchPattern | xargs -I{} \cp -f {} TargetCopyPath

find SearchPath -type f -iname SearchNamePattern | xargs -I{} cp  {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs -I{} mv {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs -I{} \mv -f {} TargetCopyPath
find SearchPath -type f -iname SearchNamePattern | xargs \grep --color -oi grepPattern

#forcely remove the folder in the SearchPath
find SearchPath -type d -iname "*" | xargs \rm -rf
find ./* -type d -iname "*" | xargs \rm -rf

grep -RiIl 'SearchPattern' SearchPath | xargs sed -i 's/search/replace/g'

env | sort
ln -sTf SourceFolderName TargetLinkerName
ln -snf SourceFolderName TargetLinkerName

#check the key details in the SHELL you used
#list binding key details info in tcsh
bindkey -b
#list binding key details info in bash
man bash
#search Commands for Moving

#--------------------------------------------------
#command for git maintain

#save the state
# $git add .
# $git commit -m "comments for current status"

#save the state
# $git commit -am "comments for current status"

#remove the new edit and back to last commit
# $git reset --hard
# $git remote add [shortname_on_remote] [url_remote_address]

# $git clone --recursive git@github.com:qshan/myenv.git

# $git remote

# $git branch -A

# $git branch BranchName

# $git switch NameOfSwitched

# $git fetch origin

# $git pull

# $git pull FileNameWithPath

# $git add New_File_With_Path

# $git commit -am "update bashrc description"

# $git push

# $git push NameToRemote NameFromLocal

# $git push origin_remote master_local

# $git push origin master

# $git push origin :

# $git add/rm <file>... # to update what will be committed

# $git checkout -- <file>... # to discard changes in working directory

# $git checkout TagVersionNameYouNeed

# $git checkout BranchNameWithPath

## create a new branch from master
# $git checkout -b NewBranchName master

# $git checkout master

#HEAD sequence:
# ~ most of the time to goback a number of generations, usually you want, is almost linear in appearance and wants to go backward in a straight line
# ^ on merge commits, because they have two or more parents, suggests an interesting of a tree or a fork in the road
# $git checkout HEAD

# $git checkout HEAD~1
# $git checkout HEAD^

# $git checkout HEAD~2
# $git checkout HEAD^^

#--------------------------------------------------
#      git-command               WorkSpace                 Stage/Index           History/LocalRepo         RemoteRepo
#git add                              Y           -->          Y
#--------------------------------------------------------------------------------
#git commit -a                        Y                       -->                       Y
#git commit -am                       Y                       -->                       Y
#git checkout                         Y                       <--                       Y
#git commit                                                    Y             -->        Y
#git reset --soft                                              Y             <--        Y
#git reset --mixed                    Y                       <--                       Y
#git reset --hard                     Y(deleted new edit)     <--                       Y
#git pull                             Y                                      <--                                 Y
#--------------------------------------------------------------------------------
#git push                                                                               Y           -->          Y
#git fetch                                                                              Y           <--          Y
#git clone                                                                              Y           <--          Y
#--------------------------------------------------

# $git rm --cached <file>

# $git reset HEAD <file>...

# $git clean -n -d
# $git clean -f -d

##undo add
# $git reset

##undo a commit and redo
# $git commit -m "comments this time"
# $git reset --soft HEAD^
##edit the files
# $git commit -a -c ORIG_HEAD

#undo a commit permanently
# $git commit -m "comments this time"
##the last thress commits (HEAD, HEAD^ and HEAD~2) ware bad, polish them
# $git reset --hard HEAD~3
# $git status

# $git log

# $git log -p

# $git log -p -3

# $git log --stat

# $git log --pretty

# $git log --pretty=format:"%h - %an, %ar : %s"

# $git log --pretty=format:"%h - %an, %ar : %s" --graph

##list the git tag list
# $git tag

##create a tag
# $git tag NewTagName

##create a tag with comments
# $git tag -a NewTagVersionName -m "comments for this version tag"

##create a tag with comment
# $git tag -a NewTagVersionName -m "comments for this version tag"

##verify the if the tag successfully created by git tag command
# $git tag -n

# $git tag -l "Tag_keyword_info"

# $git tag -d TagNameDeleted

# $git fetch origin_remote tag TanName

# $git show TagVersionName

# $git push origin TagVersionNameYouWantToShare

# $git push origin --tags


# $git status -s

# $git diff FileName

# $git diff --cached FileName

# $git diff HEAD

# $git diff --stat

# $git diff Branch1 Branch2

# $git diff Branch1 Branch2 --stat

##save local modification away,
##and revert the working directory to match the HEAD commit
# $git stash save # same as #git stash
##remove a single stashed state, and do the inverse operation of git stash save.
# $git stash pop
# $git stash apply

#------------start of git stash--------------------------------------
##... hack hack...
# $git stash
##edit emergency fix
# $git commit -a -m "Fix in a hurry"
# $git stash pop
##...continue hack hack...
#------------end of git stash  --------------------------------------


####create the local repo folder
# $mkdir ProjectFolderName
####init the local repo
# $cd ProjectFolderName
# $git init
####create or copy file you need here
# $touch Reamme.txt
####add the files into stage
# $git add Reamme.txt
# $git add FilesNameNeededBack
####add to repo
# $git commit -am "comment for this change"
####create a bare repository and clone the local info to remote repository
# $cd RemoteRepositoryFolerNameWithPullPath
# $git clone --bare file://ProjectFolderNameWithFullPath/.git RemoteRepositoryName.git
##or
# $git clone --bare file://ProjectFolderNameWithFullPath/.git RemoteRepositoryFolerNameWithPullPath/RemoteRepositoryName.git
####add a localname for remote repo. create linker the local repository with remote repository
# $git remote add origin file://RemoteRepositoryFolerNameWithPullPath/RemoteRepositoryName.git
####push the local repo to remote repo
# $git push --set-upstream origin master        #first time
# $git push origin master                       #normal push
####get the code from remote repo
# $git clone file://RemoteRepositoryFolerNameWithPullPath/RemoteRepositoryName.git.git
# $git clone file://RemoteRepositoryFolerNameWithPullPath/RemoteRepositoryName.git.git NewFolderName
#------------end of create git backup in local path--------------------------------------
##
# $

#sudo \rm -f  /var/lib/dpkg/info/git-el.postinst

#sudo apt-get install -y NameOfSoftware
#sudo apt-get -f install
#sudo apt-get install --reinstall NameOfSoftware
#sudo apt-get autoremove NameOfSoftware

#sudo apt-get install autotools-dev automake gettext gettext-el
#http://ftp.gnu.org/gnu/automake/
#http://ftp.gnu.org/gnu/automake/automake-1.16.tar.xz
#http://ftp.gnu.org/gnu/automake/automake-1.16.3.tar.xz

#sudo apt-cache search KeyWordsSearched

#--------------------------------------------------
#$sudo apt-get install -y gettext gettext-base gettext-doc gettext-el gettext-lint libgettextpo0 libgettextpo-dev
#$sudo apt-get install -y libsysfs-dev
#$sudo apt-get install pkg-config pkg-config-aarch64-linux-gnu pkgconf
#$sudo apt-get install libncurses5 libncurses5-dbg libncurses5-dev lib64ncurses5 lib64ncurses5-dev
#$sudo apt-get install gdb gdb64 gdb-source gdb-doc gdb-dbg gdb-multiarch xxgdb

#$sudo apt-get install libiconv-hook-dev
#$sudo apt-get install libtool
#$sudo apt-get install linkchecker linkchecker-gui linklint link-grammar
#$sudo apt-get install intltool intltool-debian autopoint libint-dev
#$sudo apt-get install libgtk2.0-dev libgtk2.0-common libgtk-3-dev libgtk-3-common libgtk2.0-bin libgtk-3-bin
#$sudo apt-get install autoconf autoconf-archive automake libtool libtool-bin
#$sudo apt-get install libglib2.0-dev libglib3.0-cil-dev

#issue 'AM_ICONV_LINK' not found in library
#To check where aclocal is looking for m4 files
#$(aclocal --print)
#if you get this path, /usr/local/share/aclocal, then check if the *.m4 file is in this path
#if *.m4 files is in this path, /usr/share/aclocal/*.m4, then create the linker on the path aclocal needed
#$cd /usr/local/share/aclocal; ln -s /usr/share/aclocal/*.m .
#or add prefix to figure out the path of *.m4 file for aclocal, like,
#$aclocal -I /usr/share/aclocal
#or add alias for aclocal with this prefix, like
#bash#$ alias aclocal='\aclocal -I /usr/share/aclocal'
#tcsh#$ alias aclocal '\aclocal -I /usr/share/aclocal'
#--------------------------------------------------



#sudo apt-get install kdbg
