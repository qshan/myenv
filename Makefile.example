#!/usr/bin/make
#
#meaning of specific strings
#reference info is here: https://www.gnu.org/software/make/manual/html_node/Automatic-Variables.html#Automatic-Variables
#--------------------------------------------------
#*#     $@      The file name of the target of the rule. ‘$@’ is the name of whichever target caused the rule’s recipe
#                 to be run. all of FileNameWithExtension produced
#       $*      all of FileNameWithoutExtension produced
#       $<      the FileName of first dependence item
#*#     $^      the dependency items with space isolated and remove the repeated item
#       $+      the dependency items with space isolated, but do not remove the repeated item
#       $?      the dependency items with space isolated, but just have the new item
#       $|      The names of all the order-only prerequisites, with spaces between them
#--------------------------------------------------
#       $(@D)   The directory part of the file name of the target, with the trailing slash removed.
#                 If the value of ‘$@’ is dir/foo.o then ‘$(@D)’ is dir.
#                 This value is . if ‘$@’ does not contain a slash
#       $(@F)   The file-within-directory part of the file name of the target. If the value of ‘$@’
#                 is dir/foo.o then ‘$(@F)’ is foo.o. ‘$(@F)’ is equivalent to ‘$(notdir $@)’.
#       $(*D)
#       $(*F)   The directory part and the file-within-directory part of the stem; dir and foo in this example.
#       $(%D)
#       $(%F)   The directory part and the file-within-directory part of the target archive member name.
#                 This makes sense only for archive member targets of the form archive(member) and is useful
#                 only when member may contain a directory name. (See Archive Members as Targets.)
#       $(<D)
#       $(<F)   The directory part and the file-within-directory part of the first prerequisite.
#       $(^D)
#       $(^F)   Lists of the directory parts and the file-within-directory parts of all prerequisites.
#       $(+D)
#       $(+F)   Lists of the directory parts and the file-within-directory parts of all prerequisites,
#                 including multiple instances of duplicated prerequisites.
#       $(?D)
#       $(?F)   Lists of the directory parts and the file-within-directory parts of all prerequisites that are newer
#                 than the target.
#--------------------------------------------------
#*#     %   pattern rules, like %.o : %.c
#--------------------------------------------------
# Functions for Transforming Text : https://www.gnu.org/software/make/manual/html_node/Functions.html
##### function about string
# $(subst <from>,<to>,<text> )
# $(patsubst <pattern>,<replacement>,<text> )
# $(strip <string> )
# $(strip a b c )
# $(findstring <find>,<in> )
# $(filter <pattern...>,<text> )
# $(filter-out <pattern...>,<text> )
# $(sort <list> )  #sort the words of the list in lexical order, removing duplicate words.
# $(word <n>,<text> )
# $(word n,text)
# $(wordlist s,e,text)
# $(words text)
# $(firstword names…)
# $(lastword names…)
#--------------------------------------------------
# https://www.gnu.org/software/make/manual/html_node/File-Name-Functions.html
##### function about operation of file name
# $(dir <names...> )
# $(notdir <names...> )
# $(suffix <names...> )
# $(basename <names...> )
# $(addsuffix <suffix>,<names...> )
# $(addprefix <prefix>,<names...> )
# $(join <list1>,<list2> )
# $(wildcard pattern)
# $(realpath names…)
# $(abspath names…)
#
# $(file op filename[,text])
#--------------------------------------------------
##### function foreach
# $(foreach <var>,<list>,<text> )
#--------------------------------------------------
##### function conditional
# $(if <condition>,<then-part> )
# $(if <condition>,<then-part>,<else-part> )
# $(if condition,then-part[,else-part])
# $(or condition1[,condition2[,condition3…]])
# $(and condition1[,condition2[,condition3…]])

#--------------------------------------------------
##### function call
# $(call <expression>,<parm1>,<parm2>,<parm3>...)
#--------------------------------------------------
##### function origin
# $(origin <variable> )
#--------------------------------------------------
# $(value variable)
#--------------------------------------------------
##### function shell
# $(shell ls *.c)
# files := $(shell ls *.c)
#--------------------------------------------------
##### function control make process
# $(error <text ...> )
# $(warning <text ...> )
# $(info <text ...> )
#--------------------------------------------------
##### rule of Makefile, update a list from a to b
# $(var_name:a=b)
# $(var_name:.o=.c)
# same as
# $(patsubst %a ,%b ,var_name)
#--------------------------------------------------
#
#automatic variables          Descriptions
#*#     $@                    The file name of the target
#       $<                    The name of the first prerequisite
#*#     $^                    The names of all the prerequisites
#       $+                    Prerequisites listed more than once are duplicated in the order
#
# define a variable, Var=xx , and the methods of using variable is $(Var)
#
#Search path
# vpath src include
# vpath %.c src
# vpath %.C src
#
# vpath %.cpp src
# vpath %.CPP src
#
# vpath %.h include
#
# vpath %.cc src
# vpath %.CC src
#
# vpath %.s src
# vpath %.S src
#
#VPATH: Search Path for All Prerequisites. #VPATH was designed to find sources, not targets.
# The value of the make variable VPATH specifies a list of directories that make should search.
# Most often, the directories are expected to contain prerequisite files that are not in the
# current directory; however, make uses VPATH as a search list for both prerequisites and targets of rules.
# Example of VPATH:
#
# VPATH = path1 path2
# VPATH = path1:path2
# VPATH = path1;path2
#
#vpath, The vpath Directive
# Similar to the VPATH variable, but more selective, is the vpath directive (note lower case),
# which allows you to specify a search path for a particular class of file names: those that
# match a particular pattern. Thus you can supply certain search directories for one class of
# file names and other directories (or none) for other file names.
# Example of vpath
#
# #Specify the search path directories for file names that match pattern.
# 1. vpath Pattern Path
# #Clear out the search path associated with pattern.
# 2. vpath Pattern
# #Clear all search paths previously specified with vpath directives.
# 3. vpath
#
# #Specify the search path directories for file names that match pattern.
# vpath test.c Path
# vpath %.c Path
#
# #Clear out the search path associated with pattern.
# vpath test.c
# vpath %.c
#
# #Clear all search paths previously specified with vpath directives.
# vpath
#
#match standard
# %.o: %.c
#
# %.o: %.c
#   gcc -g -o $@ -c $<
#
#.PHONY: all #info#this items is for no dependance item
#------------------------------
# compiler to generate the dep files
# gcc
# -MD
# -MF File
# -MP
# -MT Target
#
#%.o:%.c
# 	gcc -c -g -Wall $< -o $@ -MD -MF $*.d -MP
#------------------------------

DSF_CC?=armcc
DSF_LINK?=armlink
DSF_CFLAGS= -O2
DSF_CPPFLAGS= -I include
export DSF_CC DSF_LINK DSF_CFLAGS DSFDSF_CPPFLAGS

DSF_TOP_DIR=
DSF_INC_DIR=
DSF_SRC_DIR=

DSF_TARGET_NAME=
DSF_MODULE_LIBS=
DSF_OBJS=
DSF_SRC=$(wildcard *.c ./sub/*.c)

#set DSF_SRCS variable
DSF_SRCS := $(wildcard *.c)
#get the *.c file in the DSF_SRC_DIR
DSF_SRCS += $(foreach dir,$(DSF_SRC_DIR),$(wildcard $(dir)/*.c))
#replace the *.c to *.o name in the contents of DSF_SRCS
DSF_OBJS := $(patsubst %.c,%.o, $(DSF_SRCS))
#replace the *.c to *.o name in the contents of DSF_SRCS, tne remove the path info, and remove the duplacte files
#info# DSF_OBJS := $(sort $(notdir $(DSF_SRCS:.c=.o)))
#get the path info, and remove the duplacte files
#info# DSF_OBJS := $(sort $(notdir $(DSF_SRCS)))
#replace the *.c to *.o name in the contents of DSF_SRCS
DSF_OBJS_D := $(patsubst %.c,%.d,$(DSF_SRCS))

$(info $(DSF_TARGET_NAME) )
$(info “here add the debug info”)
$(warning “here add the debug info”)
$(error “error: this will stop the compile”)

#all:$(TARGET) debug
$(DSF_TARGET_NAME):$(DSF_OBJS)
#	$(DSF_CC) $(DSF_OBJS) -o $(DSF_TARGET_NAME)
	$(DSF_CC)  -o $(DSF_TARGET_NAME) $^ -include $(DSF_OBJS_D)
	$(info $(DSF_TARGET_NAME) )

$(DSF_OBJS):%.o:%.c
#	$(DSF_CC) -c  $(DSF_CPPFLAGS)  -o $@  $(DSF_CFLAGS) $^
	$(DSF_CC) $(DSF_CPPFLAGS) $(DSF_CFLAGS) -MM -MT $@ -MF $(patsubst %o,%d,$@) $<
	$(DSF_CC) $(DSF_CPPFLAGS) -o $@ $(DSF_CFLAGS) $<


.PHONY :debug
debug:
	@echo "srcs = $(SRCS),objs = $(OBJS)."

.PHONY : clean
clean:
	rm -rf add.o sub.o main.o main.d
	make clean -C src

VPATH = src:../header

#$@ target file
#$^ all dependance files
#S< the firt dependance file

#DSF_Target:DSF_Prerequisites
#	DSF_recipe

#DSF_OBJS:DSF_Prerequisites
#	$(DSF_CC) $(DSF_CFLAGS) $(DSF_IDIR) $(DSF_MODULE_LIBS)

#wildcard call the *.c file in folders of ./ and ./sub
#DSF_SRC=$(wildcard *.c ./sub/*.c)

#patsubst change the ".c" to ".o" in the contents of $(dir)
#obj=$(patsubst %.c,%.o,$(dir) )

#.PHONYa:clean
#clean:
#	\rm *.o
